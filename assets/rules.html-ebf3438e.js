import{_ as p,V as o,W as c,X as n,Y as s,Z as t,a0 as e,F as i}from"./framework-f06be456.js";const l={},u=n("h1",{id:"go编码规范",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#go编码规范","aria-hidden":"true"},"#"),s(" Go编码规范")],-1),r={href:"https://github.com/uber-go/guide",target:"_blank",rel:"noopener noreferrer"},d={href:"https://github.com/xxjwxc/uber_go_guide_cn",target:"_blank",rel:"noopener noreferrer"},k=e('<p>Go编码规范其<strong>实并不是官方定义的规范</strong>，而是一家名为Uber的美国硅谷科技公司编写的。Uber作为早期Go语言的实践者，积累了非常多的关于Go编程的经验，于是开源了Go语言规范，就跟Java里面的阿里巴巴手册一样，被很多团队视为了开发规范。虽然里面的内容是非常值得学习的，但在编码的时候代码始终是自己写的，具体解决方法需要结合具体情况而定，不要盲目的去遵守某一种规范或规定，反而被限制了思想。</p><h2 id="准则" tabindex="-1"><a class="header-anchor" href="#准则" aria-hidden="true">#</a> 准则</h2><p><code>guidelines</code>，英文里有参考和准则的意思，是针对Go的一些特性和技巧的建议。</p><h3 id="指向interface的指针" tabindex="-1"><a class="header-anchor" href="#指向interface的指针" aria-hidden="true">#</a> 指向<code>interface</code>的指针</h3><p>在传递<code>interface</code>时，将接口作为值进行传递，这样在传递过程中，底层传递的数据仍然可以是指针。</p>',5),m={href:"https://draveness.me/golang/docs/part2-foundation/ch04-basic/golang-interface/#422-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84",target:"_blank",rel:"noopener noreferrer"},v=e(`<ul><li>类型指针，一个指向某些特定类型信息的指针</li><li>数据指针，如果存储的数据是指针，则直接存储。如果存储的是一个值，则存储指向该值的指针。</li></ul><p>如果希望接口的方法修改结构体的基础数据，就必须显示式的使用指针。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Human <span class="token keyword">interface</span> <span class="token punctuation">{</span>
   <span class="token function">Shop</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> Man <span class="token keyword">struct</span> <span class="token punctuation">{</span>
   Money <span class="token builtin">int</span>
   Items <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>m Man<span class="token punctuation">)</span> <span class="token function">Shop</span><span class="token punctuation">(</span>num <span class="token builtin">int</span><span class="token punctuation">,</span> item <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   m<span class="token punctuation">.</span>Money <span class="token operator">-=</span> num
   m<span class="token punctuation">.</span>Items <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>Items<span class="token punctuation">,</span> item<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> Woman <span class="token keyword">struct</span> <span class="token punctuation">{</span>
   Money <span class="token builtin">int</span>
   Items <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>w <span class="token operator">*</span>Woman<span class="token punctuation">)</span> <span class="token function">Shop</span><span class="token punctuation">(</span>num <span class="token builtin">int</span><span class="token punctuation">,</span> item <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   w<span class="token punctuation">.</span>Money <span class="token operator">-=</span> num
   w<span class="token punctuation">.</span>Items <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>w<span class="token punctuation">.</span>Items<span class="token punctuation">,</span> item<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">TestShop</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment">// 普通接收者</span>
   man <span class="token operator">:=</span> Man<span class="token punctuation">{</span>
      Money<span class="token punctuation">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>
      Items<span class="token punctuation">:</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
   <span class="token punctuation">}</span>
   fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>man<span class="token punctuation">)</span>
   man<span class="token punctuation">.</span><span class="token function">Shop</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">&quot;phone&quot;</span><span class="token punctuation">)</span>
   fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>man<span class="token punctuation">)</span>

   <span class="token comment">// 指针接收者</span>
   woman <span class="token operator">:=</span> Woman<span class="token punctuation">{</span>
      Money<span class="token punctuation">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>
      Items<span class="token punctuation">:</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
   <span class="token punctuation">}</span>
   fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>woman<span class="token punctuation">)</span>
   woman<span class="token punctuation">.</span><span class="token function">Shop</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">,</span> <span class="token string">&quot;dress&quot;</span><span class="token punctuation">)</span>
   fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>woman<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),b={href:"https://draveness.me/golang/docs/part2-foundation/ch04-basic/golang-interface/#%E6%8C%87%E9%92%88%E5%92%8C%E6%8E%A5%E5%8F%A3",target:"_blank",rel:"noopener noreferrer"},h=n("h2",{id:"性能",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#性能","aria-hidden":"true"},"#"),s(" 性能")],-1),f=n("p",null,[n("code",null,"performances"),s("，这部分的内容是针对性能这一块的优化，如何写出性能更好的代码是这一部分探讨的内容。")],-1),g=n("h2",{id:"风格",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#风格","aria-hidden":"true"},"#"),s(" 风格")],-1),_=n("p",null,[n("code",null,"styles"),s("，这部分的内容是对于代码编写风格的建议。写出一段谁也读不懂的代码很容易，但是想要写出一段易于阅读，容易被他人理解的代码可一点也不简单，甚至可以说是十分困难。")],-1);function y(w,x){const a=i("ExternalLinkIcon");return o(),c("div",null,[u,n("p",null,[s("官方仓库："),n("a",r,[s("uber-go/guide: The Uber Go Style Guide. (github.com)"),t(a)])]),n("p",null,[s("中文仓库："),n("a",d,[s("xxjwxc/uber_go_guide_cn: Uber Go 语言编码规范中文版. The Uber Go Style Guide . (github.com)"),t(a)])]),k,n("p",null,[s("接口在底层数据有两个"),n("a",m,[s("字段"),t(a)]),s("：")]),v,n("p",null,[s("为什么会发生这种情况，本文不会赘述，想要了解可以前往："),n("a",b,[s("Go 语言接口的原理 | Go 语言设计与实现 (draveness.me)"),t(a)])]),h,f,g,_])}const G=p(l,[["render",y],["__file","rules.html.vue"]]);export{G as default};
