import{_ as n,V as s,W as a,Z as e}from"./framework-44a66fc7.js";const t={},p=e(`<h1 id="map" tabindex="-1"><a class="header-anchor" href="#map" aria-hidden="true">#</a> map</h1><p>在go中与其它语言不同的是，映射表的支持是由<code>map</code>关键字提供的，而非将其封装为标准库。映射表是一种使用场景非常多的数据结构，底层有着许多的实现方式，最常见的两种方式就是红黑树和哈希表，go采用的是哈希表实现方式。</p><h2 id="内部结构" tabindex="-1"><a class="header-anchor" href="#内部结构" aria-hidden="true">#</a> 内部结构</h2><p><code>runtime.hmap</code>结构体就是代表着go中的<code>map</code>，与切片一样<code>map</code>的内部实现也是结构体。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// A header for a Go map.</span>
<span class="token keyword">type</span> hmap <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	<span class="token comment">// Note: the format of the hmap is also encoded in cmd/compile/internal/reflectdata/reflect.go.</span>
	<span class="token comment">// Make sure this stays in sync with the compiler&#39;s definition.</span>
	count     <span class="token builtin">int</span> <span class="token comment">// # live cells == size of map.  Must be first (used by len() builtin)</span>
	flags     <span class="token builtin">uint8</span>
	B         <span class="token builtin">uint8</span>  <span class="token comment">// log_2 of # of buckets (can hold up to loadFactor * 2^B items)</span>
	noverflow <span class="token builtin">uint16</span> <span class="token comment">// approximate number of overflow buckets; see incrnoverflow for details</span>
	hash0     <span class="token builtin">uint32</span> <span class="token comment">// hash seed</span>

	buckets    unsafe<span class="token punctuation">.</span>Pointer <span class="token comment">// array of 2^B Buckets. may be nil if count==0.</span>
	oldbuckets unsafe<span class="token punctuation">.</span>Pointer <span class="token comment">// previous bucket array of half the size, non-nil only when growing</span>
	nevacuate  <span class="token builtin">uintptr</span>        <span class="token comment">// progress counter for evacuation (buckets less than this have been evacuated)</span>

	extra <span class="token operator">*</span>mapextra <span class="token comment">// optional fields</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>英文注释已经说明的很清晰了，下面对比较重要的字段进行一些简单的解释</p><ul><li><p><code>count</code>，表示hamp中的元素数量，结果等同于<code>len(map)</code>。</p></li><li><p><code>flags</code>，hmap的标志位，用于表示hmap处于什么状态，有以下几种可能。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">const</span> <span class="token punctuation">(</span>
    iterator     <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment">// 迭代器正在使用桶</span>
    oldIterator  <span class="token operator">=</span> <span class="token number">2</span> <span class="token comment">// 迭代器正在使用旧桶</span>
    hashWriting  <span class="token operator">=</span> <span class="token number">4</span> <span class="token comment">// 一个协程正在写入hmap</span>
    sameSizeGrow <span class="token operator">=</span> <span class="token number">8</span> <span class="token comment">// 当前map扩容成一个相同容量的新map，即等量扩容</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>B</code>，表示hamp中哈希桶的数量，通常是<code>2^n</code>。</p></li><li><p><code>noverflow</code>，hmap中溢出桶的大致数量。</p></li><li><p><code>hash0</code>，哈希种子，在hmap被创建时指定，用于计算哈希值。</p></li><li><p><code>buckets</code>，存放哈希桶数组的指针。</p></li><li><p><code>oldbuckets</code>，存放hmap在扩容前哈希桶数组的指针。</p></li><li><p><code>extra</code>，存放着hmap中的溢出桶，溢出桶指的是就是当前桶已经满了，创建新的桶来存放元素，新创建的桶就是溢出桶。</p></li></ul><p>hamp中的<code>bucket</code>也就是桶，在go中对应的结构为<code>runtime.bmap</code>，如下所示</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// A bucket for a Go map.</span>
<span class="token keyword">type</span> bmap <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	<span class="token comment">// tophash generally contains the top byte of the hash value</span>
	<span class="token comment">// for each key in this bucket. If tophash[0] &lt; minTopHash,</span>
	<span class="token comment">// tophash[0] is a bucket evacuation state instead.</span>
	tophash <span class="token punctuation">[</span>bucketCnt<span class="token punctuation">]</span><span class="token builtin">uint8</span>
	<span class="token comment">// Followed by bucketCnt keys and then bucketCnt elems.</span>
	<span class="token comment">// NOTE: packing all the keys together and then all the elems together makes the</span>
	<span class="token comment">// code a bit more complicated than alternating key/elem/key/elem/... but it allows</span>
	<span class="token comment">// us to eliminate padding which would be needed for, e.g., map[int64]int8.</span>
	<span class="token comment">// Followed by an overflow pointer.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上面可以看到它只有一个<code>tophash</code>的字段，该字段是用于存放每个键的高八位，不过实际上来说，<code>bmap</code>的字段不止这些，这是因为<code>map</code>可以存储各种类型的键值对，所以需要在编译时根据类型来推导占用的内存空间，在源代码<code>cmd/compile/internal/reflectdata/reflect.go</code>中，有着相关的介绍。所以实际上，<code>bmap</code>的结构如下</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> bmap <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	tophash <span class="token punctuation">[</span>BUCKETSIZE<span class="token punctuation">]</span><span class="token builtin">uint8</span>
	keys <span class="token punctuation">[</span>BUCKETSIZE<span class="token punctuation">]</span>keyType
	elems <span class="token punctuation">[</span>BUCKETSIZE<span class="token punctuation">]</span>elemType
	overflow <span class="token operator">*</span>bucket
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不过这些字段对我们是不可见的，其中的一些解释如下</p><ul><li><code>tophash</code>，存放每一个键的高八位值</li><li><code>keys</code>，存放指定类型键的数组。</li><li><code>elems</code>，存放指定类型值的数组。</li><li><code>overflow</code>，指向溢出桶的指针。</li></ul><p>在<code>cmd/compile/internal/reflectdata/reflect.go</code>中的<code>MapBucketType</code>函数的功能就是创建bucket，它会进行一系列检查工作，比如key的类型是否<code>comparable</code>。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// MapBucketType makes the map bucket type given the type of the map.</span>
<span class="token keyword">func</span> <span class="token function">MapBucketType</span><span class="token punctuation">(</span>t <span class="token operator">*</span>types<span class="token punctuation">.</span>Type<span class="token punctuation">)</span> <span class="token operator">*</span>types<span class="token punctuation">.</span>Type
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="哈希冲突" tabindex="-1"><a class="header-anchor" href="#哈希冲突" aria-hidden="true">#</a> 哈希冲突</h2><p>在hmap中，有一个字段<code>extra</code>专门用来存放溢出桶的信息，它会指向存放溢出桶的切片，其结构如下。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> mapextra <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	<span class="token comment">// 溢出桶的指针切片</span>
	overflow    <span class="token operator">*</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>bmap
	<span class="token comment">// 扩容前旧的溢出桶的指针切片</span>
	oldoverflow <span class="token operator">*</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>bmap
	<span class="token comment">// 指向下一个空闲的溢出桶的指针</span>
	nextOverflow <span class="token operator">*</span>bmap
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202310061622883.png" style="zoom:50%;"><p>上图就可以比较好的展示hmap的大致结构，<code>buckets</code>指向原有的桶切片，<code>extra</code>指向溢出桶切片，桶<code>bucket0</code>指向溢出桶<code>overflow0</code>，两种不同的桶分别存放在两个切片中，两种桶的内存都是连续的。当两个键通过哈希后被分配到了同一个bucket，这种情况就是发生了哈希冲突。go中解决哈希冲突的方式就是拉链法，当发生冲突的键的数量大于桶的容量后，一般是8个，其值取决于<code>internal/abi.MapBucketCount</code>。然后就会创建一个新的桶来存放这些键，而这个桶就叫溢出桶，意为原来的桶装不下了，元素溢出到这个新桶里来了，创建完毕后，原有的桶会有一个指针指向新的溢出桶，这些桶的指针连起来就形成了一个链表。</p><p>对于拉链法而言，负载因子可以用于衡量哈希表的冲突情况，其计算公式如下</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>loadfactor <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>elems<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">len</span><span class="token punctuation">(</span>buckets<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当负载因子越大时，说明哈希冲突越多，也就是溢出桶的数量越多，那么在读写哈希表时，就需要遍历更多的溢出桶链表，才能找到指定的位置，所以性能就越差。为了改善这种情况，应该增加<code>buckets</code>桶的数量，也就是扩容，对于hmap而言，有两种情况会触发扩容</p><ul><li>负载因子超过一定阈值<code>bucketCnt*13/16</code>，至少是6.5。</li><li>溢出桶过多</li></ul><p>当负载因子越小时，说明hmap的内存利用率低，占用的内存就越大。go中用于计算负载因子的函数是<code>runtime.overLoadFactor</code></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">overLoadFactor</span><span class="token punctuation">(</span>count <span class="token builtin">int</span><span class="token punctuation">,</span> B <span class="token builtin">uint8</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> count <span class="token operator">&gt;</span> bucketCnt <span class="token operator">&amp;&amp;</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span> <span class="token operator">&gt;</span> loadFactorNum<span class="token operator">*</span><span class="token punctuation">(</span><span class="token function">bucketShift</span><span class="token punctuation">(</span>B<span class="token punctuation">)</span><span class="token operator">/</span>loadFactorDen<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中<code>loadFactorNum</code>和<code>loadFactorDen</code>都是一个常数，<code>bucketshift</code>是计算<code>1 &lt;&lt; B</code>，并且已知</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>loadFactorNum <span class="token operator">=</span> <span class="token punctuation">(</span>bucketCnt <span class="token operator">*</span> <span class="token number">13</span> <span class="token operator">/</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">*</span> loadFactorDen
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>所以化简一下就能得到</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>count <span class="token operator">&gt;</span> bucketCnt <span class="token operator">&amp;&amp;</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> B <span class="token operator">&gt;</span> <span class="token punctuation">(</span>bucketCnt <span class="token operator">*</span> <span class="token number">13</span> <span class="token operator">/</span> <span class="token number">16</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中<code>(bucketCnt * 13 / 16)</code>值为6.5，所以该函数的作用就是计算元素数量除以桶的数量值是否大于负载因子6.5。</p><h2 id="创建" tabindex="-1"><a class="header-anchor" href="#创建" aria-hidden="true">#</a> 创建</h2><p>map的初始化有两种方式，这一点已经在语言入门中阐述过了。不管用何种方式初始化，最后都是由<code>runtime.makemap</code>来创建map，该函数签名如下</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">makemap</span><span class="token punctuation">(</span>t <span class="token operator">*</span>maptype<span class="token punctuation">,</span> hint <span class="token builtin">int</span><span class="token punctuation">,</span> h <span class="token operator">*</span>hmap<span class="token punctuation">)</span> <span class="token operator">*</span>hmap
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中的参数</p><ul><li><code>t</code>，指的是map的类型，不同的类型所需的内存占用不同</li><li><code>hint</code>，指的是<code>make</code>函数的第二个参数，map预计元素的容量。</li><li><code>h</code>，指的是<code>hmap</code>的指针，可以为<code>nil</code>。</li></ul><p>返回值就是初始化完毕的<code>hmap</code>指针。该函数在初始化过程中有几个主要的工作。首先就是计算预计分配的内存是否会超出最大分配内存，对应如下代码</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 将预计容量与桶类型的内存大小相乘</span>
mem<span class="token punctuation">,</span> overflow <span class="token operator">:=</span> math<span class="token punctuation">.</span><span class="token function">MulUintptr</span><span class="token punctuation">(</span><span class="token function">uintptr</span><span class="token punctuation">(</span>hint<span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span>Bucket<span class="token punctuation">.</span>Size_<span class="token punctuation">)</span>
<span class="token comment">// 数值溢出或者超出了最大分配内存</span>
<span class="token keyword">if</span> overflow <span class="token operator">||</span> mem <span class="token operator">&gt;</span> maxAlloc <span class="token punctuation">{</span>
    hint <span class="token operator">=</span> <span class="token number">0</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在先前的内部结构中已经提到过，hmap内部是由桶组成的，在内存利用率最低的情况下，一个桶只有一个元素，占用的内存最多，所以预计的最大占用内存就是元素容量乘以对应类型的内存占用。如果计算结果数值溢出了，或者超出了最大能分配的内存，就将hint置为0，因为后续需要用hint来计算桶数组的容量。</p><p>然后初始化hmap，并计算出一个随机的哈希种子，对应如下代码</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 初始化</span>
<span class="token keyword">if</span> h <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
    h <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span>hmap<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// 获取一个随机的哈希种子</span>
h<span class="token punctuation">.</span>hash0 <span class="token operator">=</span> <span class="token function">fastrand</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再根据hint的值计算出哈希桶的容量，对应的代码如下</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>B <span class="token operator">:=</span> <span class="token function">uint8</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
<span class="token comment">// 不断循环直到 hint / 1 &lt;&lt; B &lt; 6.5</span>
<span class="token keyword">for</span> <span class="token function">overLoadFactor</span><span class="token punctuation">(</span>hint<span class="token punctuation">,</span> B<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    B<span class="token operator">++</span>
<span class="token punctuation">}</span>
<span class="token comment">// 赋值给hmap</span>
h<span class="token punctuation">.</span>B <span class="token operator">=</span> B
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过不断循环找到第一个满足<code>(hint / 1 &lt;&lt; B) &lt; 6.5</code>的B值，将其赋值给hmap，在知晓了哈希桶的容量后，然后就是为哈希桶分配内存</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> h<span class="token punctuation">.</span>B <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> nextOverflow <span class="token operator">*</span>bmap
    <span class="token comment">// 分配好的哈希桶，和预先分配的空闲溢出桶</span>
    h<span class="token punctuation">.</span>buckets<span class="token punctuation">,</span> nextOverflow <span class="token operator">=</span> <span class="token function">makeBucketArray</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> h<span class="token punctuation">.</span>B<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
    <span class="token comment">// 如果预先分配了空闲溢出桶，就指向该溢出桶</span>
    <span class="token keyword">if</span> nextOverflow <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        h<span class="token punctuation">.</span>extra <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span>mapextra<span class="token punctuation">)</span>
        h<span class="token punctuation">.</span>extra<span class="token punctuation">.</span>nextOverflow <span class="token operator">=</span> nextOverflow
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>makeBucketArray</code>函数会根据B的值，为哈希桶分配对应大小的内存，以及预先分配好空闲的溢出桶，当B小于4时，就不会创建溢出桶，如果大于4那么就会创建<code>2^B-4</code>个溢出桶。对应<code>runtime.makeBucketArray</code>函数中的如下代码</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>base <span class="token operator">:=</span> <span class="token function">bucketShift</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
nbuckets <span class="token operator">:=</span> base
<span class="token comment">// 小于4就不会创建溢出桶</span>
<span class="token keyword">if</span> b <span class="token operator">&gt;=</span> <span class="token number">4</span> <span class="token punctuation">{</span>
    <span class="token comment">// 预计桶的数量加上1 &lt;&lt; (b-4)</span>
    nbuckets <span class="token operator">+=</span> <span class="token function">bucketShift</span><span class="token punctuation">(</span>b <span class="token operator">-</span> <span class="token number">4</span><span class="token punctuation">)</span>
    <span class="token comment">// 溢出桶所需的内存</span>
    sz <span class="token operator">:=</span> t<span class="token punctuation">.</span>Bucket<span class="token punctuation">.</span>Size_ <span class="token operator">*</span> nbuckets
    <span class="token comment">// 将内存空间向上取整</span>
    up <span class="token operator">:=</span> <span class="token function">roundupsize</span><span class="token punctuation">(</span>sz<span class="token punctuation">)</span>
    <span class="token keyword">if</span> up <span class="token operator">!=</span> sz <span class="token punctuation">{</span>
        <span class="token comment">// 不相等就采用up重新计算</span>
        nbuckets <span class="token operator">=</span> up <span class="token operator">/</span> t<span class="token punctuation">.</span>Bucket<span class="token punctuation">.</span>Size_
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>base</code>指的是预计分配桶的数量，<code>nbuckets</code>指的是实际分配桶的数量，因为它加上了溢出桶的数量。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> base <span class="token operator">!=</span> nbuckets <span class="token punctuation">{</span>
    <span class="token comment">// 第一个可用的溢出桶</span>
    nextOverflow <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>bmap<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span>buckets<span class="token punctuation">,</span> base<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>BucketSize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment">// 为了减少跟踪溢出桶的开销，将最后一个可用溢出桶的溢出指针指向哈希桶的头部</span>
    last <span class="token operator">:=</span> <span class="token punctuation">(</span><span class="token operator">*</span>bmap<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span>buckets<span class="token punctuation">,</span> <span class="token punctuation">(</span>nbuckets<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>BucketSize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    last<span class="token punctuation">.</span><span class="token function">setoverflow</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">*</span>bmap<span class="token punctuation">)</span><span class="token punctuation">(</span>buckets<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当两者不相等时，就说明分配了溢出桶，<code>nextoverflow</code>指针就是指向的第一个可用的溢出桶。由此可见，哈希桶与溢出桶其实是在同一块连续的内存中，这是为什么在之前的图中会将哈希桶与溢出桶放在一起的原因。</p>`,50),o=[p];function c(l,i){return s(),a("div",null,o)}const d=n(t,[["render",c],["__file","map.html.vue"]]);export{d as default};
