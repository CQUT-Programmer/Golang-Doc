import{_ as n,V as s,W as a,Z as p}from"./framework-44a66fc7.js";const t={},e=p(`<h1 id="slice" tabindex="-1"><a class="header-anchor" href="#slice" aria-hidden="true">#</a> slice</h1><div class="hint-container tip"><p class="hint-container-title">提示</p><p>阅读本文需要<code>unsafe</code>标准库的知识。</p></div><p>在了解切片的结构之前，通过几个案例来引入问题，通常会认为数组是值类型，切片是引用类型，或者说切片本身可以看作一个指针，指针指向的正是底层数组。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   slice <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">}</span>
   <span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>slice<span class="token punctuation">)</span>
   <span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>slice<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>前者是切片指针的地址，后者是切片底层数组的地址。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>0xc000059f58
0xc000059f08
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>官方文档中有说明使用<code>append</code>函数给切片添加元素时，当切片容量不足时，会创建一个新的底层数组。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   slice <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
   <span class="token function">println</span><span class="token punctuation">(</span>slice<span class="token punctuation">)</span>
   <span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>slice<span class="token punctuation">)</span>
   slice <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>slice<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
   <span class="token function">println</span><span class="token punctuation">(</span>slice<span class="token punctuation">)</span>
   <span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>slice<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[0/0]0xc000059f50
0xc000059f58     
[1/1]0xc000088000
0xc000059f58     
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>println(slice)</code>输出指针所指向的地址，而<code>&amp;slice</code>则是指针的地址，切片的初始容量为0，当添加一个元素后，因容量不足，就会分配一个新的底层数组，所以在添加前后，切片指向的是两个不同的底层数组。那如果接下来这种情况呢？</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	slice <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span>
	<span class="token function">println</span><span class="token punctuation">(</span>slice<span class="token punctuation">)</span>
	<span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>slice<span class="token punctuation">)</span>
	<span class="token function">add</span><span class="token punctuation">(</span>slice<span class="token punctuation">)</span>
	<span class="token function">println</span><span class="token punctuation">(</span>slice<span class="token punctuation">)</span>
	<span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>slice<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">add</span><span class="token punctuation">(</span>s <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
	<span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span>
	s <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span>
	<span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
	<span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[2/2]0xc000059f30  
0xc000059f40       
[2/2]0xc000059f30  
0xc000059f58       
[10/10]0xc0000180f0
0xc000059f58       
[2/2]0xc000059f30  
0xc000059f40   
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>初始的<code>slice</code>容量只有2，指向的底层数组地址为<code>0xc000059f30 </code>，<code>slice</code>的地址为<code>0xc000059f40 </code>，由于Go中的函数参数是值传递的，所以形参<code>s</code>拷贝了<code>slice</code>的值，而<code>slice</code>的值就是底层数组的地址，所以<code>slice</code>和<code>s</code>指向的都是同一个底层数组。而后使用<code>append</code>函数添加了9个元素，由于容量不足，于是Go给<code>s</code>分配了一个新的底层数组，于是<code>s</code>指向的底层数组地址变为<code>0xc0000180f0</code>，但是改变形参的值，完全不会影响到实参的值，因为两者本身的内存地址不同，这导致了<code>slice</code>指向的底层数组地址依旧是<code>0xc000059f30</code>，结果就是<code>add</code>函数并没有将元素成功添加进<code>slice</code>。</p><br><p>继续思考一个问题，那如果容量足够呢？看下面的一个例子，将切片的初始容量设置为了<code>10000</code>。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	slice <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span>
	<span class="token function">println</span><span class="token punctuation">(</span>slice<span class="token punctuation">)</span>
	<span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>slice<span class="token punctuation">)</span>
	<span class="token function">println</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>slice<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token function">add</span><span class="token punctuation">(</span>slice<span class="token punctuation">)</span>
	<span class="token function">println</span><span class="token punctuation">(</span>slice<span class="token punctuation">)</span>
	<span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>slice<span class="token punctuation">)</span>
	<span class="token function">println</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>slice<span class="token punctuation">)</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>slice<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">add</span><span class="token punctuation">(</span>s <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
	<span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span>
	<span class="token function">println</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>
	s <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span>
	<span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
	<span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span>
	<span class="token function">println</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[2/10000]0xc00011a000 
0xc000115f58          
2                     
[2/10000]0xc00011a000 
0xc000115f18          
2                     
[10/10000]0xc00011a000
0xc000115f18          
10                    
[0 0 1 2 3 4 5 6 7 8] 
[2/10000]0xc00011a000 
0xc000115f58          
2                     
[0 0]    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从理论上来说，容量足够，就不会扩容，也就不会分配新数组，那元素应该可以添加成功。但是结果中可以看出，尽管全程操作的底层数组都是同一个，<code>add</code>函数执行完后，从原切片的角度来看依旧没有成功添加。在整个过程中，有一个点很关键，那就是长度的变化，在<code>add</code>函数内部，添加元素后的切片长度为10，而在函数执行完后，原切片的长度依旧为2，这就导致了都是同一个底层数组，但是输出的元素却不同，而究竟为何会如此，这就引出了本节真正的内容，切片的原理。</p><br><h2 id="数据结构" tabindex="-1"><a class="header-anchor" href="#数据结构" aria-hidden="true">#</a> 数据结构</h2><p>事实上，切片其实是一个结构体，该类型为<code>runtime.slice</code>。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> slice <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	array unsafe<span class="token punctuation">.</span>Pointer
	<span class="token builtin">len</span>   <span class="token builtin">int</span>
	<span class="token builtin">cap</span>   <span class="token builtin">int</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该结构体是不对外暴露的，官方提供了一个对外暴露的版本，<code>reflect.SliceHeader</code>。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> SliceHeader <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Data <span class="token builtin">uintptr</span>
	Len  <span class="token builtin">int</span>
	Cap  <span class="token builtin">int</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>后者才是切片的运行时表示，因此就可以通过<code>unsafe.Pointer</code>来访问其字段和底层数组，同一个底层数组可以被多个切片引用。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   slice <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span>
   arr <span class="token operator">:=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>reflect<span class="token punctuation">.</span>SliceHeader<span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>slice<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Data<span class="token punctuation">)</span><span class="token punctuation">)</span>
   fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>再回去看之前的案例，通过<code>Pointer</code>直接访问底层数组</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	slice <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span>
	<span class="token function">add</span><span class="token punctuation">(</span>slice<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>slice<span class="token punctuation">)</span><span class="token punctuation">)</span>
	p <span class="token operator">:=</span> unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>reflect<span class="token punctuation">.</span>SliceHeader<span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>slice<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Data<span class="token punctuation">)</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d &quot;</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">*</span>unsafe<span class="token punctuation">.</span><span class="token function">Sizeof</span><span class="token punctuation">(</span><span class="token function">int</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">add</span><span class="token punctuation">(</span>s <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	s <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>切片<code>slice</code>与切片<code>s</code>是两个不同的切片结构体，函数参数是值传递的，因此<code>s</code>是<code>slice</code>的值拷贝，但是它们指向的都是同一个底层数组，在<code>add</code>函数中向切片<code>s</code>添加了8个元素，由于容量足够而没有扩容，所以操作的都是同一个底层数组，因此底层数组也确确实实的被修改了，<code>append</code>函数的返回值是一新的切片结构体，于是对于切片<code>s</code>而言，长度被更新了，但是这对于作为实参的切片<code>slice</code>而言一点影响也没有，它认为底层数组的元素数量依旧是2个，所以无论是通过索引取值还是遍历都无法访问长度以外的元素，当下标大于1的时候也会抛出<code>panic</code>。为了证明一点可以使用<code>unsafe</code> 操作通过内存地址来访问底层数组，通过输出结果可以发现，尽管<code>slice</code>显示的长度只有2，但底层数组的有效元素个数确实为10，并且可以通过指针运算直接读取。就算持有相同的数组引用，即便长度相同，也无法访问到数组的其余元素，这是切片的安全性的体现，使用切片的调用者只需要关注切片层面，不需要关注底层数组的变化。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>10
2                   
0 0 1 2 3 4 5 6 7 8 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以手动更换切片底层数组</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   slice <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span>
   fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>slice<span class="token punctuation">)</span><span class="token punctuation">)</span>
   arr <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span>
   <span class="token punctuation">(</span><span class="token operator">*</span>reflect<span class="token punctuation">.</span>SliceHeader<span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>slice<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Data <span class="token operator">=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span>
   fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>slice<span class="token punctuation">)</span><span class="token punctuation">)</span>
   fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>slice<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到指向一个新的底层数组后，通过切片获取的元素也发生变化。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>2
2
9
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="创建" tabindex="-1"><a class="header-anchor" href="#创建" aria-hidden="true">#</a> 创建</h2><p>通常情况下，创建切片方法有，字面量和<code>make</code>关键字。</p><h3 id="make" tabindex="-1"><a class="header-anchor" href="#make" aria-hidden="true">#</a> make</h3><p>在使用<code>make</code>创建切片时，表达式如<code>make([]int,5,5)</code>在编译期间会转换为如下结构体</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> CallExpr <span class="token keyword">struct</span> <span class="token punctuation">{</span>
   miniExpr
   origNode
   X         Node
   Args      Nodes
   KeepAlive <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>Name <span class="token comment">// vars to be kept alive until call returns</span>
   IsDDD     <span class="token builtin">bool</span>
   NoInline  <span class="token builtin">bool</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>随后将结构体传入<code>tcmake</code>函数中</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">tcMake</span><span class="token punctuation">(</span>n <span class="token operator">*</span>ir<span class="token punctuation">.</span>CallExpr<span class="token punctuation">)</span> ir<span class="token punctuation">.</span>Node
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>首先会对第一个参数进行类型检查</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">tcMake</span><span class="token punctuation">(</span>n <span class="token operator">*</span>ir<span class="token punctuation">.</span>CallExpr<span class="token punctuation">)</span> ir<span class="token punctuation">.</span>Node <span class="token punctuation">{</span>
	args <span class="token operator">:=</span> n<span class="token punctuation">.</span>Args
	<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		base<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;missing argument to make&quot;</span><span class="token punctuation">)</span>
		n<span class="token punctuation">.</span><span class="token function">SetType</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> n
	<span class="token punctuation">}</span>

	n<span class="token punctuation">.</span>Args <span class="token operator">=</span> <span class="token boolean">nil</span>
    <span class="token comment">// 拿到第一个参数</span>
	l <span class="token operator">:=</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    <span class="token comment">// 进行类型检查</span>
	l <span class="token operator">=</span> <span class="token function">typecheck</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> ctxType<span class="token punctuation">)</span>
    <span class="token comment">// 拿到类型</span>
	t <span class="token operator">:=</span> l<span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">// 判空</span>
	<span class="token keyword">if</span> t <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		n<span class="token punctuation">.</span><span class="token function">SetType</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> n
	<span class="token punctuation">}</span>
    <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>随后根据第一个参数判断出的类型对剩余的参数进行处理</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">tcMake</span><span class="token punctuation">(</span>n <span class="token operator">*</span>ir<span class="token punctuation">.</span>CallExpr<span class="token punctuation">)</span> ir<span class="token punctuation">.</span>Node <span class="token punctuation">{</span>
    <span class="token comment">// i表示待处理的参数下标</span>
	i <span class="token operator">:=</span> <span class="token number">1</span>
	<span class="token keyword">var</span> nn ir<span class="token punctuation">.</span>Node
	<span class="token keyword">switch</span> t<span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">default</span><span class="token punctuation">:</span>
		base<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;cannot make type %v&quot;</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span>
		n<span class="token punctuation">.</span><span class="token function">SetType</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> n

	<span class="token comment">// 切片类型</span>
	<span class="token keyword">case</span> types<span class="token punctuation">.</span>TSLICE<span class="token punctuation">:</span>
		<span class="token comment">// 参数数量判断</span>
		<span class="token keyword">if</span> i <span class="token operator">&gt;=</span> <span class="token function">len</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			base<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;missing len argument to make(%v)&quot;</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span>
			n<span class="token punctuation">.</span><span class="token function">SetType</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span>
			<span class="token keyword">return</span> n
		<span class="token punctuation">}</span>

		<span class="token comment">// 长度</span>
		l <span class="token operator">=</span> args<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
		i<span class="token operator">++</span>
		l <span class="token operator">=</span> <span class="token function">Expr</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span>
		<span class="token comment">// 容量</span>
		<span class="token keyword">var</span> r ir<span class="token punctuation">.</span>Node
        
		<span class="token comment">// 然后就是一堆情况判断</span>
		<span class="token keyword">if</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			r <span class="token operator">=</span> args<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
			i<span class="token operator">++</span>
			r <span class="token operator">=</span> <span class="token function">Expr</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		<span class="token comment">// 判空</span>
		<span class="token keyword">if</span> l<span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token operator">||</span> <span class="token punctuation">(</span>r <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> r<span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">nil</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			n<span class="token punctuation">.</span><span class="token function">SetType</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span>
			<span class="token keyword">return</span> n
		<span class="token punctuation">}</span>
		<span class="token comment">// 边界检查</span>
		<span class="token keyword">if</span> <span class="token operator">!</span><span class="token function">checkmake</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token string">&quot;len&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>l<span class="token punctuation">)</span> <span class="token operator">||</span> r <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">checkmake</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token string">&quot;cap&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>r<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			n<span class="token punctuation">.</span><span class="token function">SetType</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span>
			<span class="token keyword">return</span> n
		<span class="token punctuation">}</span>
		<span class="token comment">// 长度必须小于容量</span>
		<span class="token keyword">if</span> ir<span class="token punctuation">.</span><span class="token function">IsConst</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> constant<span class="token punctuation">.</span>Int<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> r <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> ir<span class="token punctuation">.</span><span class="token function">IsConst</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> constant<span class="token punctuation">.</span>Int<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> constant<span class="token punctuation">.</span><span class="token function">Compare</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span><span class="token function">Val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> token<span class="token punctuation">.</span>GTR<span class="token punctuation">,</span> r<span class="token punctuation">.</span><span class="token function">Val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			base<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;len larger than cap in make(%v)&quot;</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span>
			n<span class="token punctuation">.</span><span class="token function">SetType</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span>
			<span class="token keyword">return</span> n
		<span class="token punctuation">}</span>
		<span class="token comment">// 最终到这里调用函数创建MakeExpr结构体</span>
		nn <span class="token operator">=</span> ir<span class="token punctuation">.</span><span class="token function">NewMakeExpr</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span><span class="token function">Pos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ir<span class="token punctuation">.</span>OMAKESLICE<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span>
    <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后一切顺利的话会生成一个<code>MakeExpr</code>结构体，代表着类似<code>make(Type,Len,Cap)</code>这样的make表达式。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> MakeExpr <span class="token keyword">struct</span> <span class="token punctuation">{</span>
   miniExpr
   Len Node
   Cap Node
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编译期间的初始化就结束了，最后兜兜转转来到运行时，交由<code>runtime.makeslice</code>来为要创建的切片分配内存。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">makeslice</span><span class="token punctuation">(</span>et <span class="token operator">*</span>_type<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">,</span> <span class="token builtin">cap</span> <span class="token builtin">int</span><span class="token punctuation">)</span> unsafe<span class="token punctuation">.</span>Pointer <span class="token punctuation">{</span>
   <span class="token comment">// mem就是计算出来所需要的内存，overflow代表是否溢出</span>
   <span class="token comment">// 内存 = 元素大小 * 切片容量</span>
   mem<span class="token punctuation">,</span> overflow <span class="token operator">:=</span> math<span class="token punctuation">.</span><span class="token function">MulUintptr</span><span class="token punctuation">(</span>et<span class="token punctuation">.</span>size<span class="token punctuation">,</span> <span class="token function">uintptr</span><span class="token punctuation">(</span><span class="token builtin">cap</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
   <span class="token keyword">if</span> overflow <span class="token operator">||</span> mem <span class="token operator">&gt;</span> maxAlloc <span class="token operator">||</span> <span class="token builtin">len</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token builtin">len</span> <span class="token operator">&gt;</span> <span class="token builtin">cap</span> <span class="token punctuation">{</span>
      mem<span class="token punctuation">,</span> overflow <span class="token operator">:=</span> math<span class="token punctuation">.</span><span class="token function">MulUintptr</span><span class="token punctuation">(</span>et<span class="token punctuation">.</span>size<span class="token punctuation">,</span> <span class="token function">uintptr</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token keyword">if</span> overflow <span class="token operator">||</span> mem <span class="token operator">&gt;</span> maxAlloc <span class="token operator">||</span> <span class="token builtin">len</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
         <span class="token function">panicmakeslicelen</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      <span class="token function">panicmakeslicecap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
   <span class="token punctuation">}</span>

   <span class="token comment">// 分配内存</span>
   <span class="token keyword">return</span> <span class="token function">mallocgc</span><span class="token punctuation">(</span>mem<span class="token punctuation">,</span> et<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>完成后，<code>makeslice</code>函数仅返回一个指向底层数组的指针，将其交给早就在编译期间由<code>tcSliceHeader</code>函数创建好了的<code>reflect.SliceHeader</code>结构体。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">tcSliceHeader</span><span class="token punctuation">(</span>n <span class="token operator">*</span>ir<span class="token punctuation">.</span>SliceHeaderExpr<span class="token punctuation">)</span> ir<span class="token punctuation">.</span>Node <span class="token punctuation">{</span>
   t <span class="token operator">:=</span> n<span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
   <span class="token comment">// 非空判断</span>
   <span class="token keyword">if</span> t <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
      base<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">&quot;no type specified for OSLICEHEADER&quot;</span><span class="token punctuation">)</span>
   <span class="token punctuation">}</span>

   <span class="token comment">// 是否为切片类型</span>
   <span class="token keyword">if</span> <span class="token operator">!</span>t<span class="token punctuation">.</span><span class="token function">IsSlice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      base<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">&quot;invalid type %v for OSLICEHEADER&quot;</span><span class="token punctuation">,</span> n<span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
   <span class="token punctuation">}</span>

   <span class="token comment">// 底层数组引用是否有效</span>
   <span class="token keyword">if</span> n<span class="token punctuation">.</span>Ptr <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token operator">||</span> n<span class="token punctuation">.</span>Ptr<span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token operator">||</span> <span class="token operator">!</span>n<span class="token punctuation">.</span>Ptr<span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">IsUnsafePtr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      base<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">&quot;need unsafe.Pointer for OSLICEHEADER&quot;</span><span class="token punctuation">)</span>
   <span class="token punctuation">}</span>

   <span class="token comment">// 类型转换</span>
   n<span class="token punctuation">.</span>Ptr <span class="token operator">=</span> <span class="token function">Expr</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>Ptr<span class="token punctuation">)</span>
   n<span class="token punctuation">.</span>Len <span class="token operator">=</span> <span class="token function">DefaultLit</span><span class="token punctuation">(</span><span class="token function">Expr</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>Len<span class="token punctuation">)</span><span class="token punctuation">,</span> types<span class="token punctuation">.</span>Types<span class="token punctuation">[</span>types<span class="token punctuation">.</span>TINT<span class="token punctuation">]</span><span class="token punctuation">)</span>
   n<span class="token punctuation">.</span>Cap <span class="token operator">=</span> <span class="token function">DefaultLit</span><span class="token punctuation">(</span><span class="token function">Expr</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>Cap<span class="token punctuation">)</span><span class="token punctuation">,</span> types<span class="token punctuation">.</span>Types<span class="token punctuation">[</span>types<span class="token punctuation">.</span>TINT<span class="token punctuation">]</span><span class="token punctuation">)</span>

   <span class="token comment">// 边界条件检查</span>
   <span class="token keyword">if</span> ir<span class="token punctuation">.</span><span class="token function">IsConst</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>Len<span class="token punctuation">,</span> constant<span class="token punctuation">.</span>Int<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> ir<span class="token punctuation">.</span><span class="token function">Int64Val</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>Len<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
      base<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">&quot;len for OSLICEHEADER must be non-negative&quot;</span><span class="token punctuation">)</span>
   <span class="token punctuation">}</span>

   <span class="token keyword">if</span> ir<span class="token punctuation">.</span><span class="token function">IsConst</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>Cap<span class="token punctuation">,</span> constant<span class="token punctuation">.</span>Int<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> ir<span class="token punctuation">.</span><span class="token function">Int64Val</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>Cap<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
      base<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">&quot;cap for OSLICEHEADER must be non-negative&quot;</span><span class="token punctuation">)</span>
   <span class="token punctuation">}</span>

   <span class="token keyword">if</span> ir<span class="token punctuation">.</span><span class="token function">IsConst</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>Len<span class="token punctuation">,</span> constant<span class="token punctuation">.</span>Int<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> ir<span class="token punctuation">.</span><span class="token function">IsConst</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>Cap<span class="token punctuation">,</span> constant<span class="token punctuation">.</span>Int<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> constant<span class="token punctuation">.</span><span class="token function">Compare</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>Len<span class="token punctuation">.</span><span class="token function">Val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> token<span class="token punctuation">.</span>GTR<span class="token punctuation">,</span> n<span class="token punctuation">.</span>Cap<span class="token punctuation">.</span><span class="token function">Val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      base<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">&quot;len larger than cap for OSLICEHEADER&quot;</span><span class="token punctuation">)</span>
   <span class="token punctuation">}</span>

   <span class="token keyword">return</span> n
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>至此，通过内置函数<code>make</code>创建切片完毕。</p><br><h3 id="字面量" tabindex="-1"><a class="header-anchor" href="#字面量" aria-hidden="true">#</a> 字面量</h3><p>假如有如下的字面量初始化方式，</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>slice <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>那么在编译期间将会转换成如下代码</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> underarr <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token builtin">int</span>
underarr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
underarr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span>
underarr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span>
underarr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">5</span>
underarr<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">6</span>
ptr <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span>
<span class="token operator">*</span>ptr <span class="token operator">=</span> underarr
slice <span class="token operator">:=</span> ptr<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="切片表达式" tabindex="-1"><a class="header-anchor" href="#切片表达式" aria-hidden="true">#</a> 切片表达式</h3><p>对于切片表达式而言，在编译期间会被转换为一个结构体</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> SliceExpr <span class="token keyword">struct</span> <span class="token punctuation">{</span>
   miniExpr
   X    Node
   Low  Node
   High Node
   Max  Node
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>假如有如下表达式，</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>slice<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>那么字段对应关系如下：</p><ul><li><code>X</code> - <code>slice</code></li><li><code>Low</code> - <code>0</code></li><li><code>High</code> - <code>5</code></li><li><code>Max</code> - <code>5</code></li></ul><p>在编译时传入<code>tcSlice</code>函数进行参数检查</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">tcSlice</span><span class="token punctuation">(</span>n <span class="token operator">*</span>ir<span class="token punctuation">.</span>SliceExpr<span class="token punctuation">)</span> ir<span class="token punctuation">.</span>Node <span class="token punctuation">{</span>
	n<span class="token punctuation">.</span>X <span class="token operator">=</span> <span class="token function">DefaultLit</span><span class="token punctuation">(</span><span class="token function">Expr</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>X<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
	n<span class="token punctuation">.</span>Low <span class="token operator">=</span> <span class="token function">indexlit</span><span class="token punctuation">(</span><span class="token function">Expr</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>Low<span class="token punctuation">)</span><span class="token punctuation">)</span>
	n<span class="token punctuation">.</span>High <span class="token operator">=</span> <span class="token function">indexlit</span><span class="token punctuation">(</span><span class="token function">Expr</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>High<span class="token punctuation">)</span><span class="token punctuation">)</span>
	n<span class="token punctuation">.</span>Max <span class="token operator">=</span> <span class="token function">indexlit</span><span class="token punctuation">(</span><span class="token function">Expr</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>Max<span class="token punctuation">)</span><span class="token punctuation">)</span>
	hasmax <span class="token operator">:=</span> n<span class="token punctuation">.</span><span class="token function">Op</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">IsSlice3</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	l <span class="token operator">:=</span> n<span class="token punctuation">.</span>X
	<span class="token keyword">if</span> l<span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		n<span class="token punctuation">.</span><span class="token function">SetType</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> n
	<span class="token punctuation">}</span>
    <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>随后在由<code>cmd\\compile\\internal\\ssagen\\ssa.slice</code>函数完成ssa转换，计算切片表达式，事实上字符串，数组，或指针都要由此函数计算表达式。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>state<span class="token punctuation">)</span> <span class="token function">slice</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k <span class="token operator">*</span>ssa<span class="token punctuation">.</span>Value<span class="token punctuation">,</span> bounded <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>p<span class="token punctuation">,</span> l<span class="token punctuation">,</span> c <span class="token operator">*</span>ssa<span class="token punctuation">.</span>Value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   t <span class="token operator">:=</span> v<span class="token punctuation">.</span>Type
   <span class="token keyword">var</span> ptr<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">,</span> <span class="token builtin">cap</span> <span class="token operator">*</span>ssa<span class="token punctuation">.</span>Value
   <span class="token keyword">switch</span> <span class="token punctuation">{</span>
   <span class="token keyword">case</span> t<span class="token punctuation">.</span><span class="token function">IsSlice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
      ptr <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">newValue1</span><span class="token punctuation">(</span>ssa<span class="token punctuation">.</span>OpSlicePtr<span class="token punctuation">,</span> types<span class="token punctuation">.</span><span class="token function">NewPtr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span>
      <span class="token builtin">len</span> <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">newValue1</span><span class="token punctuation">(</span>ssa<span class="token punctuation">.</span>OpSliceLen<span class="token punctuation">,</span> types<span class="token punctuation">.</span>Types<span class="token punctuation">[</span>types<span class="token punctuation">.</span>TINT<span class="token punctuation">]</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span>
      <span class="token builtin">cap</span> <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">newValue1</span><span class="token punctuation">(</span>ssa<span class="token punctuation">.</span>OpSliceCap<span class="token punctuation">,</span> types<span class="token punctuation">.</span>Types<span class="token punctuation">[</span>types<span class="token punctuation">.</span>TINT<span class="token punctuation">]</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span>
   <span class="token punctuation">}</span>
   <span class="token operator">...</span>   
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后转换为<code>ssa.OpSliceMake</code>，相当于创建一个新的切片结构体，填充新计算出的指针，长度与容量，且指针指向的是同一个数组，修改新切片同样会修改原切片。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>state<span class="token punctuation">)</span> <span class="token function">exprCheckPtr</span><span class="token punctuation">(</span>n ir<span class="token punctuation">.</span>Node<span class="token punctuation">,</span> checkPtrOK <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token operator">*</span>ssa<span class="token punctuation">.</span>Value <span class="token punctuation">{</span>
    <span class="token operator">...</span>
    <span class="token keyword">switch</span> n<span class="token punctuation">.</span><span class="token function">Op</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token keyword">case</span> ir<span class="token punctuation">.</span>OSLICE<span class="token punctuation">,</span> ir<span class="token punctuation">.</span>OSLICEARR<span class="token punctuation">,</span> ir<span class="token punctuation">.</span>OSLICE3<span class="token punctuation">,</span> ir<span class="token punctuation">.</span>OSLICE3ARR<span class="token punctuation">:</span>
           n <span class="token operator">:=</span> n<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>ir<span class="token punctuation">.</span>SliceExpr<span class="token punctuation">)</span>
           <span class="token operator">...</span>
           <span class="token comment">// 计算表达式</span>
           p<span class="token punctuation">,</span> l<span class="token punctuation">,</span> c <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">,</span> n<span class="token punctuation">.</span><span class="token function">Bounded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
           <span class="token operator">...</span>
           <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">newValue3</span><span class="token punctuation">(</span>ssa<span class="token punctuation">.</span>OpSliceMake<span class="token punctuation">,</span> n<span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> p<span class="token punctuation">,</span> l<span class="token punctuation">,</span> c<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h2 id="访问" tabindex="-1"><a class="header-anchor" href="#访问" aria-hidden="true">#</a> 访问</h2><p>切片访问分为：下标访问，长度访问，容量访问，这些操作基本都是在编译期间完成的。</p><h3 id="下标访问" tabindex="-1"><a class="header-anchor" href="#下标访问" aria-hidden="true">#</a> 下标访问</h3><p>对于如下的一个下标访问表达式</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>slice<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>首先在编译期会转换成如下结构体</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// An IndexExpr is an index expression X[Index].</span>
<span class="token keyword">type</span> IndexExpr <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	miniExpr
	X        Node
	Index    Node
	Assigned <span class="token builtin">bool</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>随后传入<code>tcIndex</code>函数，进行类型与参数检查，对于数组而言会在该函数内就检查下标是否越界，而切片则是在运行时根据字段<code>Len</code>来判断是否越界。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">tcIndex</span><span class="token punctuation">(</span>n <span class="token operator">*</span>ir<span class="token punctuation">.</span>IndexExpr<span class="token punctuation">)</span> ir<span class="token punctuation">.</span>Node <span class="token punctuation">{</span>
	<span class="token operator">...</span>
    <span class="token keyword">case</span> types<span class="token punctuation">.</span>TSTRING<span class="token punctuation">,</span> types<span class="token punctuation">.</span>TARRAY<span class="token punctuation">,</span> types<span class="token punctuation">.</span>TSLICE<span class="token punctuation">:</span>
        n<span class="token punctuation">.</span>Index <span class="token operator">=</span> <span class="token function">indexlit</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>Index<span class="token punctuation">)</span>
        <span class="token keyword">if</span> t<span class="token punctuation">.</span><span class="token function">IsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            n<span class="token punctuation">.</span><span class="token function">SetType</span><span class="token punctuation">(</span>types<span class="token punctuation">.</span>ByteType<span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            n<span class="token punctuation">.</span><span class="token function">SetType</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        why <span class="token operator">:=</span> <span class="token string">&quot;string&quot;</span>
        <span class="token keyword">if</span> t<span class="token punctuation">.</span><span class="token function">IsArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            why <span class="token operator">=</span> <span class="token string">&quot;array&quot;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> t<span class="token punctuation">.</span><span class="token function">IsSlice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            why <span class="token operator">=</span> <span class="token string">&quot;slice&quot;</span>
        <span class="token punctuation">}</span>
    	<span class="token comment">// 下标类型检查</span>
        <span class="token keyword">if</span> n<span class="token punctuation">.</span>Index<span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>n<span class="token punctuation">.</span>Index<span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">IsInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            base<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;non-integer %s index %v&quot;</span><span class="token punctuation">,</span> why<span class="token punctuation">,</span> n<span class="token punctuation">.</span>Index<span class="token punctuation">)</span>
            <span class="token keyword">return</span> n
        <span class="token punctuation">}</span>

    	
        <span class="token keyword">if</span> <span class="token operator">!</span>n<span class="token punctuation">.</span><span class="token function">Bounded</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> ir<span class="token punctuation">.</span><span class="token function">IsConst</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>Index<span class="token punctuation">,</span> constant<span class="token punctuation">.</span>Int<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            x <span class="token operator">:=</span> n<span class="token punctuation">.</span>Index<span class="token punctuation">.</span><span class="token function">Val</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token comment">// 非负数</span>
            <span class="token keyword">if</span> constant<span class="token punctuation">.</span><span class="token function">Sign</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
                base<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;invalid %s index %v (index must be non-negative)&quot;</span><span class="token punctuation">,</span> why<span class="token punctuation">,</span> n<span class="token punctuation">.</span>Index<span class="token punctuation">)</span>
            <span class="token comment">// 数组下标大于元素个数？</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> t<span class="token punctuation">.</span><span class="token function">IsArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> constant<span class="token punctuation">.</span><span class="token function">Compare</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> token<span class="token punctuation">.</span>GEQ<span class="token punctuation">,</span> constant<span class="token punctuation">.</span><span class="token function">MakeInt64</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">NumElem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                base<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;invalid array index %v (out of bounds for %d-element array)&quot;</span><span class="token punctuation">,</span> n<span class="token punctuation">.</span>Index<span class="token punctuation">,</span> t<span class="token punctuation">.</span><span class="token function">NumElem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token comment">// 字符串下标字符串长度？</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> ir<span class="token punctuation">.</span><span class="token function">IsConst</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>X<span class="token punctuation">,</span> constant<span class="token punctuation">.</span>String<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> constant<span class="token punctuation">.</span><span class="token function">Compare</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> token<span class="token punctuation">.</span>GEQ<span class="token punctuation">,</span> constant<span class="token punctuation">.</span><span class="token function">MakeInt64</span><span class="token punctuation">(</span><span class="token function">int64</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>ir<span class="token punctuation">.</span><span class="token function">StringVal</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>X<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                base<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;invalid string index %v (out of bounds for %d-byte string)&quot;</span><span class="token punctuation">,</span> n<span class="token punctuation">.</span>Index<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>ir<span class="token punctuation">.</span><span class="token function">StringVal</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>X<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> ir<span class="token punctuation">.</span><span class="token function">ConstOverflow</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> types<span class="token punctuation">.</span>Types<span class="token punctuation">[</span>types<span class="token punctuation">.</span>TINT<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 数值溢出？</span>
                base<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;invalid %s index %v (index too large)&quot;</span><span class="token punctuation">,</span> why<span class="token punctuation">,</span> n<span class="token punctuation">.</span>Index<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
	<span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后也会在ssa转换成对地址的直接访问</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>state<span class="token punctuation">)</span> <span class="token function">exprCheckPtr</span><span class="token punctuation">(</span>n ir<span class="token punctuation">.</span>Node<span class="token punctuation">,</span> checkPtrOK <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token operator">*</span>ssa<span class="token punctuation">.</span>Value <span class="token punctuation">{</span>
    <span class="token operator">...</span>
    <span class="token keyword">switch</span> n<span class="token punctuation">.</span><span class="token function">Op</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> ir<span class="token punctuation">.</span>OINDEX<span class="token punctuation">:</span>
		n <span class="token operator">:=</span> n<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>ir<span class="token punctuation">.</span>IndexExpr<span class="token punctuation">)</span>
		<span class="token keyword">switch</span> <span class="token punctuation">{</span>
		<span class="token keyword">case</span> n<span class="token punctuation">.</span>X<span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">IsSlice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
			p <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">addr</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>
			<span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>X<span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="长度容量" tabindex="-1"><a class="header-anchor" href="#长度容量" aria-hidden="true">#</a> 长度容量</h3><p>对于长度容量的话也是先类型检查，</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// tcLenCap typechecks an OLEN or OCAP node.</span>
<span class="token keyword">func</span> <span class="token function">tcLenCap</span><span class="token punctuation">(</span>n <span class="token operator">*</span>ir<span class="token punctuation">.</span>UnaryExpr<span class="token punctuation">)</span> ir<span class="token punctuation">.</span>Node <span class="token punctuation">{</span>
   n<span class="token punctuation">.</span>X <span class="token operator">=</span> <span class="token function">Expr</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>X<span class="token punctuation">)</span>
   n<span class="token punctuation">.</span>X <span class="token operator">=</span> <span class="token function">DefaultLit</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>X<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
   n<span class="token punctuation">.</span>X <span class="token operator">=</span> <span class="token function">implicitstar</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>X<span class="token punctuation">)</span>
   l <span class="token operator">:=</span> n<span class="token punctuation">.</span>X
   t <span class="token operator">:=</span> l<span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
   <span class="token keyword">if</span> t <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
      n<span class="token punctuation">.</span><span class="token function">SetType</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span> n
   <span class="token punctuation">}</span>

   <span class="token keyword">var</span> ok <span class="token builtin">bool</span>
   <span class="token keyword">if</span> n<span class="token punctuation">.</span><span class="token function">Op</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> ir<span class="token punctuation">.</span>OLEN <span class="token punctuation">{</span>
      ok <span class="token operator">=</span> okforlen<span class="token punctuation">[</span>t<span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
   <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      ok <span class="token operator">=</span> okforcap<span class="token punctuation">[</span>t<span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
   <span class="token punctuation">}</span>
   <span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>
      base<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;invalid argument %L for %v&quot;</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> n<span class="token punctuation">.</span><span class="token function">Op</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      n<span class="token punctuation">.</span><span class="token function">SetType</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span> n
   <span class="token punctuation">}</span>

   n<span class="token punctuation">.</span><span class="token function">SetType</span><span class="token punctuation">(</span>types<span class="token punctuation">.</span>Types<span class="token punctuation">[</span>types<span class="token punctuation">.</span>TINT<span class="token punctuation">]</span><span class="token punctuation">)</span>
   <span class="token keyword">return</span> n
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后ssa转换成<code>ssa.OpSliceLen</code>和<code>ssa.OpSliceCap</code></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>state<span class="token punctuation">)</span> <span class="token function">exprCheckPtr</span><span class="token punctuation">(</span>n ir<span class="token punctuation">.</span>Node<span class="token punctuation">,</span> checkPtrOK <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token operator">*</span>ssa<span class="token punctuation">.</span>Value <span class="token punctuation">{</span>
    <span class="token operator">...</span>
    <span class="token keyword">switch</span> n<span class="token punctuation">.</span><span class="token function">Op</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> ir<span class="token punctuation">.</span>OLEN<span class="token punctuation">,</span> ir<span class="token punctuation">.</span>OCAP<span class="token punctuation">:</span>
            n <span class="token operator">:=</span> n<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>ir<span class="token punctuation">.</span>UnaryExpr<span class="token punctuation">)</span>
            <span class="token keyword">switch</span> <span class="token punctuation">{</span>
            <span class="token keyword">case</span> n<span class="token punctuation">.</span>X<span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">IsSlice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                op <span class="token operator">:=</span> ssa<span class="token punctuation">.</span>OpSliceLen
                <span class="token keyword">if</span> n<span class="token punctuation">.</span><span class="token function">Op</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> ir<span class="token punctuation">.</span>OCAP <span class="token punctuation">{</span>
                    op <span class="token operator">=</span> ssa<span class="token punctuation">.</span>OpSliceCap
                <span class="token punctuation">}</span>
                <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">newValue1</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> types<span class="token punctuation">.</span>Types<span class="token punctuation">[</span>types<span class="token punctuation">.</span>TINT<span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">expr</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>X<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>
    <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h2 id="添加" tabindex="-1"><a class="header-anchor" href="#添加" aria-hidden="true">#</a> 添加</h2><p>首先对于如下<code>append</code>语句</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>slice <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>slice<span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>先会转换成如下表达式结构体</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// A CallExpr is a function call X(Args).</span>
<span class="token keyword">type</span> CallExpr <span class="token keyword">struct</span> <span class="token punctuation">{</span>
   miniExpr
   origNode
   X         Node
   Args      Nodes
   KeepAlive <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>Name <span class="token comment">// vars to be kept alive until call returns</span>
   IsDDD     <span class="token builtin">bool</span>
   NoInline  <span class="token builtin">bool</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后对其进行类型检查，与之前类似都是进入<code>typecheck</code>函数的<code>switch</code>流程，这里不再赘述，最后来到<code>cmd\\compile\\internal\\ssagen\\ssa.append</code>函数，官方在注释中给出了一段<strong>伪代码</strong>简洁的解释了其流程，过程分为两种情况，主要区别在于是否覆盖原变量，不覆盖原变量的情况如下</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">//append(s, e1, e2, e3)</span>
ptr<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">,</span> <span class="token builtin">cap</span> <span class="token operator">:=</span> s
newlen <span class="token operator">:=</span> <span class="token builtin">len</span> <span class="token operator">+</span> <span class="token number">3</span>
<span class="token comment">// 新长度大于容量</span>
<span class="token keyword">if</span> newlen <span class="token operator">&gt;</span> <span class="token builtin">cap</span> <span class="token punctuation">{</span>
    <span class="token comment">// 扩容</span>
    ptr<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">,</span> <span class="token builtin">cap</span> <span class="token operator">=</span> <span class="token function">growslice</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> newlen<span class="token punctuation">)</span>
    <span class="token comment">// 重新计算长度</span>
    newlen <span class="token operator">=</span> <span class="token builtin">len</span> <span class="token operator">+</span> <span class="token number">3</span>
<span class="token punctuation">}</span>
<span class="token comment">// 写入底层数组</span>
<span class="token operator">*</span><span class="token punctuation">(</span>ptr<span class="token operator">+</span><span class="token builtin">len</span><span class="token punctuation">)</span> <span class="token operator">=</span> e1
<span class="token operator">*</span><span class="token punctuation">(</span>ptr<span class="token operator">+</span><span class="token builtin">len</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> e2
<span class="token operator">*</span><span class="token punctuation">(</span>ptr<span class="token operator">+</span><span class="token builtin">len</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">=</span> e3
<span class="token comment">// 返回新的切片</span>
<span class="token keyword">return</span> <span class="token function">makeslice</span><span class="token punctuation">(</span>ptr<span class="token punctuation">,</span> newlen<span class="token punctuation">,</span> <span class="token builtin">cap</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>覆盖原变量的情况如下，逻辑差不多</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// s = append(s, e1, e2, e3)</span>
a <span class="token operator">:=</span> <span class="token operator">&amp;</span>s
ptr<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">,</span> <span class="token builtin">cap</span> <span class="token operator">:=</span> s
newlen <span class="token operator">:=</span> <span class="token builtin">len</span> <span class="token operator">+</span> <span class="token number">3</span>
<span class="token comment">// 扩容</span>
<span class="token keyword">if</span> <span class="token function">uint</span><span class="token punctuation">(</span>newlen<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token function">uint</span><span class="token punctuation">(</span><span class="token builtin">cap</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   newptr<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">,</span> newcap <span class="token operator">=</span> <span class="token function">growslice</span><span class="token punctuation">(</span>ptr<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">,</span> <span class="token builtin">cap</span><span class="token punctuation">,</span> newlen<span class="token punctuation">)</span>
   <span class="token function">vardef</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>       
   <span class="token operator">*</span>a<span class="token punctuation">.</span><span class="token builtin">cap</span> <span class="token operator">=</span> newcap 
   <span class="token operator">*</span>a<span class="token punctuation">.</span>ptr <span class="token operator">=</span> newptr <span class="token comment">// 修改切片的底层数组引用</span>
<span class="token punctuation">}</span>
newlen <span class="token operator">=</span> <span class="token builtin">len</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token comment">// recalculate to avoid a spill</span>
<span class="token operator">*</span>a<span class="token punctuation">.</span><span class="token builtin">len</span> <span class="token operator">=</span> newlen
<span class="token comment">// 写入新的底层数组</span>
<span class="token operator">*</span><span class="token punctuation">(</span>ptr<span class="token operator">+</span><span class="token builtin">len</span><span class="token punctuation">)</span> <span class="token operator">=</span> e1
<span class="token operator">*</span><span class="token punctuation">(</span>ptr<span class="token operator">+</span><span class="token builtin">len</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> e2
<span class="token operator">*</span><span class="token punctuation">(</span>ptr<span class="token operator">+</span><span class="token builtin">len</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">=</span> e3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里看伪代码更容易理解，源代码涉及许多ssa操作，比较冗杂。</p><br><h2 id="扩容" tabindex="-1"><a class="header-anchor" href="#扩容" aria-hidden="true">#</a> 扩容</h2><p>在向切片中添加元素时，如果容量不足则切片会进行扩容操作，下面是<code>append</code>函数内进行扩容调用的关键代码</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// rtcall 调用运行时函数 Growslice</span>
r <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">rtcall</span><span class="token punctuation">(</span>ir<span class="token punctuation">.</span>Syms<span class="token punctuation">.</span>Growslice<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>types<span class="token punctuation">.</span>Type<span class="token punctuation">{</span>pt<span class="token punctuation">,</span> types<span class="token punctuation">.</span>Types<span class="token punctuation">[</span>types<span class="token punctuation">.</span>TINT<span class="token punctuation">]</span><span class="token punctuation">,</span> types<span class="token punctuation">.</span>Types<span class="token punctuation">[</span>types<span class="token punctuation">.</span>TINT<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span> taddr<span class="token punctuation">,</span> p<span class="token punctuation">,</span> l<span class="token punctuation">,</span> c<span class="token punctuation">,</span> nl<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>扩容操作的源代码主要在<code>runtime.growslice</code>函数中，关于容量扩充的流程如下</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>newcap <span class="token operator">:=</span> old<span class="token punctuation">.</span><span class="token builtin">cap</span>
doublecap <span class="token operator">:=</span> newcap <span class="token operator">+</span> newcap
<span class="token comment">// 期望容量大于二倍旧容量</span>
<span class="token keyword">if</span> <span class="token builtin">cap</span> <span class="token operator">&gt;</span> doublecap <span class="token punctuation">{</span>
   newcap <span class="token operator">=</span> <span class="token builtin">cap</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
   <span class="token keyword">const</span> threshold <span class="token operator">=</span> <span class="token number">256</span>
   <span class="token keyword">if</span> old<span class="token punctuation">.</span><span class="token builtin">cap</span> <span class="token operator">&lt;</span> threshold <span class="token punctuation">{</span>
      <span class="token comment">// 两倍扩充</span>
      newcap <span class="token operator">=</span> doublecap
   <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">for</span> <span class="token number">0</span> <span class="token operator">&lt;</span> newcap <span class="token operator">&amp;&amp;</span> newcap <span class="token operator">&lt;</span> <span class="token builtin">cap</span> <span class="token punctuation">{</span>
         <span class="token comment">// 1.25倍扩充</span>
         newcap <span class="token operator">+=</span> <span class="token punctuation">(</span>newcap <span class="token operator">+</span> <span class="token number">3</span><span class="token operator">*</span>threshold<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">4</span>
      <span class="token punctuation">}</span>
      <span class="token comment">// 当容量数值溢出时，直接使用期望容量。</span>
      <span class="token keyword">if</span> newcap <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
         newcap <span class="token operator">=</span> <span class="token builtin">cap</span>
      <span class="token punctuation">}</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>扩容的<code>threshold</code>值可能会随着版本的变化而变化，例如在以前其值为1024，在版本1.19就为256。</p></div><p>Go将旧容量小于256的切片视为小切片，大于等于256的切片视为大切片，如果期望容量大于二倍旧容量，那么就将期望容量直接作为新容量，否则按照以下规则扩容</p><ul><li>对于小切片：每次扩容都为旧容量的两倍</li><li>对于大切片：不断将旧容量乘<code>4/3</code>，直到大于期望容量。</li></ul><p>随后根据切片中的元素类型的大小进行内存对齐，分为三种情况：</p><ul><li>1</li><li>机器字长，32位为4，64位为8</li><li>2次幂</li></ul><p>随后计算预计要分配的内存，然后向上取整，对于前两种情况最终容量为内存/元素类型大小，第三种情况则为<code>mem &gt;&gt; shift </code></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">switch</span> <span class="token punctuation">{</span>
<span class="token keyword">case</span> et<span class="token punctuation">.</span>size <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
   lenmem <span class="token operator">=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>old<span class="token punctuation">.</span><span class="token builtin">len</span><span class="token punctuation">)</span>
   newlenmem <span class="token operator">=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span><span class="token builtin">cap</span><span class="token punctuation">)</span>
   capmem <span class="token operator">=</span> <span class="token function">roundupsize</span><span class="token punctuation">(</span><span class="token function">uintptr</span><span class="token punctuation">(</span>newcap<span class="token punctuation">)</span><span class="token punctuation">)</span>
   overflow <span class="token operator">=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>newcap<span class="token punctuation">)</span> <span class="token operator">&gt;</span> maxAlloc
   newcap <span class="token operator">=</span> <span class="token function">int</span><span class="token punctuation">(</span>capmem<span class="token punctuation">)</span>
<span class="token keyword">case</span> et<span class="token punctuation">.</span>size <span class="token operator">==</span> goarch<span class="token punctuation">.</span>PtrSize<span class="token punctuation">:</span>
   lenmem <span class="token operator">=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>old<span class="token punctuation">.</span><span class="token builtin">len</span><span class="token punctuation">)</span> <span class="token operator">*</span> goarch<span class="token punctuation">.</span>PtrSize
   newlenmem <span class="token operator">=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span><span class="token builtin">cap</span><span class="token punctuation">)</span> <span class="token operator">*</span> goarch<span class="token punctuation">.</span>PtrSize
   capmem <span class="token operator">=</span> <span class="token function">roundupsize</span><span class="token punctuation">(</span><span class="token function">uintptr</span><span class="token punctuation">(</span>newcap<span class="token punctuation">)</span> <span class="token operator">*</span> goarch<span class="token punctuation">.</span>PtrSize<span class="token punctuation">)</span>
   overflow <span class="token operator">=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>newcap<span class="token punctuation">)</span> <span class="token operator">&gt;</span> maxAlloc<span class="token operator">/</span>goarch<span class="token punctuation">.</span>PtrSize
   newcap <span class="token operator">=</span> <span class="token function">int</span><span class="token punctuation">(</span>capmem <span class="token operator">/</span> goarch<span class="token punctuation">.</span>PtrSize<span class="token punctuation">)</span>
<span class="token keyword">case</span> <span class="token function">isPowerOfTwo</span><span class="token punctuation">(</span>et<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span>
   <span class="token keyword">var</span> shift <span class="token builtin">uintptr</span>
   <span class="token keyword">if</span> goarch<span class="token punctuation">.</span>PtrSize <span class="token operator">==</span> <span class="token number">8</span> <span class="token punctuation">{</span>
      <span class="token comment">// Mask shift for better code generation.</span>
      shift <span class="token operator">=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span><span class="token function">Ctz64</span><span class="token punctuation">(</span><span class="token function">uint64</span><span class="token punctuation">(</span>et<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">63</span>
   <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      shift <span class="token operator">=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span><span class="token function">Ctz32</span><span class="token punctuation">(</span><span class="token function">uint32</span><span class="token punctuation">(</span>et<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">31</span>
   <span class="token punctuation">}</span>
   lenmem <span class="token operator">=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>old<span class="token punctuation">.</span><span class="token builtin">len</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> shift
   newlenmem <span class="token operator">=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span><span class="token builtin">cap</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> shift
   capmem <span class="token operator">=</span> <span class="token function">roundupsize</span><span class="token punctuation">(</span><span class="token function">uintptr</span><span class="token punctuation">(</span>newcap<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> shift<span class="token punctuation">)</span>
   overflow <span class="token operator">=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>newcap<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token punctuation">(</span>maxAlloc <span class="token operator">&gt;&gt;</span> shift<span class="token punctuation">)</span>
   newcap <span class="token operator">=</span> <span class="token function">int</span><span class="token punctuation">(</span>capmem <span class="token operator">&gt;&gt;</span> shift<span class="token punctuation">)</span>
<span class="token keyword">default</span><span class="token punctuation">:</span>
   lenmem <span class="token operator">=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>old<span class="token punctuation">.</span><span class="token builtin">len</span><span class="token punctuation">)</span> <span class="token operator">*</span> et<span class="token punctuation">.</span>size
   newlenmem <span class="token operator">=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span><span class="token builtin">cap</span><span class="token punctuation">)</span> <span class="token operator">*</span> et<span class="token punctuation">.</span>size
   capmem<span class="token punctuation">,</span> overflow <span class="token operator">=</span> math<span class="token punctuation">.</span><span class="token function">MulUintptr</span><span class="token punctuation">(</span>et<span class="token punctuation">.</span>size<span class="token punctuation">,</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>newcap<span class="token punctuation">)</span><span class="token punctuation">)</span>
   capmem <span class="token operator">=</span> <span class="token function">roundupsize</span><span class="token punctuation">(</span>capmem<span class="token punctuation">)</span>
   newcap <span class="token operator">=</span> <span class="token function">int</span><span class="token punctuation">(</span>capmem <span class="token operator">/</span> et<span class="token punctuation">.</span>size<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后会使用<code>runtime.memmove</code>函数将原数组内存拷贝到新的内存中。</p><br><h2 id="拷贝" tabindex="-1"><a class="header-anchor" href="#拷贝" aria-hidden="true">#</a> 拷贝</h2><p>切片拷贝的原理是直接将整块底层数组的内存复制到新内存中，在运行时的切片拷贝由<code>runtime.copy</code>函数完成。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">slicecopy</span><span class="token punctuation">(</span>toPtr unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">,</span> toLen <span class="token builtin">int</span><span class="token punctuation">,</span> fromPtr unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">,</span> fromLen <span class="token builtin">int</span><span class="token punctuation">,</span> width <span class="token builtin">uintptr</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
   <span class="token keyword">if</span> fromLen <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> toLen <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token number">0</span>
   <span class="token punctuation">}</span>

   n <span class="token operator">:=</span> fromLen
   <span class="token keyword">if</span> toLen <span class="token operator">&lt;</span> n <span class="token punctuation">{</span>
      n <span class="token operator">=</span> toLen
   <span class="token punctuation">}</span>

   <span class="token keyword">if</span> width <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> n
   <span class="token punctuation">}</span>

   size <span class="token operator">:=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">*</span> width
   <span class="token keyword">if</span> raceenabled <span class="token punctuation">{</span>
      callerpc <span class="token operator">:=</span> <span class="token function">getcallerpc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      pc <span class="token operator">:=</span> abi<span class="token punctuation">.</span><span class="token function">FuncPCABIInternal</span><span class="token punctuation">(</span>slicecopy<span class="token punctuation">)</span>
      <span class="token function">racereadrangepc</span><span class="token punctuation">(</span>fromPtr<span class="token punctuation">,</span> size<span class="token punctuation">,</span> callerpc<span class="token punctuation">,</span> pc<span class="token punctuation">)</span>
      <span class="token function">racewriterangepc</span><span class="token punctuation">(</span>toPtr<span class="token punctuation">,</span> size<span class="token punctuation">,</span> callerpc<span class="token punctuation">,</span> pc<span class="token punctuation">)</span>
   <span class="token punctuation">}</span>
   <span class="token keyword">if</span> msanenabled <span class="token punctuation">{</span>
      <span class="token function">msanread</span><span class="token punctuation">(</span>fromPtr<span class="token punctuation">,</span> size<span class="token punctuation">)</span>
      <span class="token function">msanwrite</span><span class="token punctuation">(</span>toPtr<span class="token punctuation">,</span> size<span class="token punctuation">)</span>
   <span class="token punctuation">}</span>
   <span class="token keyword">if</span> asanenabled <span class="token punctuation">{</span>
      <span class="token function">asanread</span><span class="token punctuation">(</span>fromPtr<span class="token punctuation">,</span> size<span class="token punctuation">)</span>
      <span class="token function">asanwrite</span><span class="token punctuation">(</span>toPtr<span class="token punctuation">,</span> size<span class="token punctuation">)</span>
   <span class="token punctuation">}</span>

   <span class="token keyword">if</span> size <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span> <span class="token comment">// common case worth about 2x to do here</span>
      <span class="token comment">// TODO: is this still worth it with new memmove impl?</span>
      <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token builtin">byte</span><span class="token punctuation">)</span><span class="token punctuation">(</span>toPtr<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token builtin">byte</span><span class="token punctuation">)</span><span class="token punctuation">(</span>fromPtr<span class="token punctuation">)</span> <span class="token comment">// known to be a byte pointer</span>
   <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">// 复制内存</span>
      <span class="token function">memmove</span><span class="token punctuation">(</span>toPtr<span class="token punctuation">,</span> fromPtr<span class="token punctuation">,</span> size<span class="token punctuation">)</span>
   <span class="token punctuation">}</span>
   <span class="token keyword">return</span> n
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意的是，切片越大，拷贝的性能消耗也就越大。</p>`,121),o=[e];function c(i,l){return s(),a("div",null,o)}const k=n(t,[["render",c],["__file","0.slice.html.vue"]]);export{k as default};
