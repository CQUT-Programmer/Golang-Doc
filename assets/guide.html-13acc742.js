import{_ as t,V as d,W as c,X as e,Y as n,Z as a,$ as r,a0 as i,F as o}from"./framework-f06be456.js";const p={},u=i('<h1 id="入门指南" tabindex="-1"><a class="header-anchor" href="#入门指南" aria-hidden="true">#</a> 入门指南</h1><p>Go语言诞生于2007年9月30日，由三位大佬共同创造，他们分别是<code>Ken Thompson</code>(贝尔实验室成员，Unix系统系统先驱，B语言创始人，C语言创始人)，<code>Rob Pike </code>（贝尔实验室成员，Unix系统先驱，UTF-8发明者之一，Go语言设计领头人），<code>Robert Griesemer</code>(JS V8引擎研发者，三人之中最年轻)，对了还有一位是领头人的妻子<code>Renee French</code>，她主导设计了Go语言的Logo，就是一只憨憨的土拨鼠，经过了三年的初步设计与研发，Go语言由谷歌公司于2009年11月10日正式以<code>BSD-3-Clause</code>协议开源，并推出了最初的版本，每半年发布一个二级版本，被称为21世纪的C语言。</p><figure><img src="https://camo.githubusercontent.com/2b507540e2681c1a25698f246b9dca69c30548ed66a7323075b0224cbb1bf058/68747470733a2f2f676f6c616e672e6f72672f646f632f676f706865722f6669766579656172732e6a7067" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="hint-container tip"><p class="hint-container-title">提示</p><p>图中便是三位大佬设计Go语言的情景，里面不少典故和彩蛋。</p></div><h2 id="特性" tabindex="-1"><a class="header-anchor" href="#特性" aria-hidden="true">#</a> 特性</h2><ul><li><strong>语法简单</strong> Go语言在自由度和灵活度上做了取舍，以此换来了更好的维护性和平滑的学习曲线，但是没法用Go整什么花活。</li><li><strong>交叉编译</strong> 在以往交叉编译往往需要一堆工具链，对于Go而言仅需要在编译时设置几个参数，即可在目标操作系统上运行。</li><li><strong>天然并发</strong> Go语言对于并发的支持是纯天然的，仅需一个关键字，就可以开启一个异步协程。</li><li><strong>垃圾回收</strong> Go语言有着垃圾回收的功能，但并不需要虚拟机。</li><li><strong>静态链接</strong> 编译后的二进制文件不需要依赖运行环境，并且编译速度相当的快。</li><li><strong>丰富的标准库</strong> 从字符串处理到源码AST解析，功能强大且丰富的标准库是Go语言坚实的基础。</li></ul><p>Go语言抛弃了继承，弱化了OOP，类，元编程，泛型，Lamda表达式等这些特性，拥有不错的性能和较低的上手难度，它非常适合用于云服务开发，应用服务端开发，甚至可以进行部分Linux嵌入式开发，不过由于带有垃圾回收，其性能肯定无法媲美C/C++这类系统级语言，但Go在其擅长的领域表现十分出色。虽然面世只有13年，但也已经有大量的行业采用了Go作为首选语言，尽管如此，Go语言仍有不少的缺点，比如令人诟病的错误处理，略显畸形的泛型，标准库虽然很丰富但内置的数据结构却没几个等等，不过总的来说这是一门非常年轻且具有活力的现代语言，值得学习。</p><br><p>此外，Go还是一门完全开源的语言，由开源社区和官方共同维护Go语言的发展，官方地址是在谷歌仓库里，但是Github上有一份同样的镜像仓库。</p>',9),v={href:"https://cs.opensource.google/go",target:"_blank",rel:"noopener noreferrer"},g={href:"https://github.com/golang/go",target:"_blank",rel:"noopener noreferrer"},h={href:"https://go.dev/",target:"_blank",rel:"noopener noreferrer"},m=e("br",null,null,-1),b=e("h2",{id:"安装",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#安装","aria-hidden":"true"},"#"),n(" 安装")],-1),k={href:"https://go.dev/dl/",target:"_blank",rel:"noopener noreferrer"},f=e("figure",null,[e("img",{src:"https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202311052223852.png",alt:"",tabindex:"0",loading:"lazy"}),e("figcaption")],-1),G=i(`<h3 id="windows" tabindex="-1"><a class="header-anchor" href="#windows" aria-hidden="true">#</a> windows</h3><p>对于windows平台而言，有installer和archive两种类型可选，前者就是安装包，只需要点点点，推荐使用后者，会让你更熟悉go语言的目录结构，未来出问题不至于手足无措。选择下载zip文件，压缩文件中包含go语言的源代码以及工具链和一些文档，将其解压指定的路径，然后需要配置两个系统环境变量。</p><ul><li>GOROOT - go语言的安装路径</li><li>GOPATH - go语言依赖存放路径</li></ul><p>设置好后，给系统环境变量<code>PATH</code>添加两条新的项</p><ul><li><code>%GOROOT%\\bin</code>：这是go二进制程序地址</li><li><code>%GOPATH%\\bin</code>：这是未来会下载第三方依赖的二进制文件存放地址</li></ul><p>在<code>powershell</code>中执行<code>go version</code>命令，最后能正常显示版本就说明安装正确。</p><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code><span class="token function">PS</span> C:\\user\\username&gt; go version
go version go1<span class="token punctuation">.</span>21<span class="token punctuation">.</span>3 windows/amd64
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>更新的话只需要下载新的zip覆盖原安装目录即可。</p><h3 id="linux" tabindex="-1"><a class="header-anchor" href="#linux" aria-hidden="true">#</a> linux</h3><p>拿ubuntu举例，复制想要的版本的链接，下载到本地</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">wget</span> https://golang.google.cn/dl/go1.21.1.linux-amd64.tar.gz
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>解压到指定目录</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">tar</span> <span class="token parameter variable">-C</span> ~/go <span class="token parameter variable">-xzf</span> go1.21.1.linux-amd64.tar.gz
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>设置环境变量</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">&quot;export GOROOT=<span class="token environment constant">$HOME</span>/go<span class="token entity" title="\\n">\\n</span>export GOPATH=<span class="token environment constant">$HOME</span>/gopath<span class="token entity" title="\\n">\\n</span>export PATH=<span class="token environment constant">$PATH</span>:<span class="token variable">$GOROOT</span>/bin:<span class="token variable">$GOPATH</span>/bin&quot;</span> <span class="token operator">&gt;&gt;</span> ~/.bashrc <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">source</span> ~/.bashrc 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看安装版本，确认正确安装</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ go version
go version go1.21.1 linux/amd64
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>更新的话只需要下载新的tar.gz覆盖原安装目录即可。</p><br><h3 id="自定义" tabindex="-1"><a class="header-anchor" href="#自定义" aria-hidden="true">#</a> 自定义</h3><p>只是基本使用而言，上面的安装方式对于基本使用已经够用了，个人推荐用以下的目录结构来存放go语言及其衍生文件</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>go/
|
|--root/
|	|
|	|--go1.21.3/
|	|
|	|--go1.20.10/
|
|--mod/
|	|
|	|--bin/
|	|
|	|--libs/
|	|
|	|--pkg/
|	
|--cache/
|
|--temp/
|
|--env
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>释义如下</p><ul><li><code>go/root</code>目录用于存放各个版本go语言源文件</li><li><code>go/mod</code>对应<code>GOAPTH</code></li><li><code>go/mod/libs</code>对应<code>GOMODCACHE</code>，也就是下载的第三方依赖存放地址</li><li><code>go/mod/bin</code>对应<code>GOBIN</code>，第三方依赖二进制文件存放地址</li><li><code>go/cache</code>，对应<code>GOCACHE</code>，存放缓存文件</li><li><code>go/temp</code>，对应<code>GOTMPDIR</code>，存放临时文件</li><li><code>go/env</code>，对应<code>GOENV</code>，全局环境变量配置文件</li></ul><p>该方式更新时不需要覆盖原安装目录，只需要将其存放到<code>go/root</code>目录下，然后修改<code>GOROOT</code>系统环境变量为该目录下指定版本的文件夹即可。在默认情况下env文件是读取的路径<code>GOROOT/env</code>，通过设置<code>GOENV</code>系统变量将其与<code>GOROOT</code>分离开，避免了版本变更时go环境变量配置的变化，下面是<code>env</code>文件的初始设置。</p><div class="language-ini line-numbers-mode" data-ext="ini"><pre class="language-ini"><code><span class="token key attr-name">GO111MODULE</span><span class="token punctuation">=</span><span class="token value attr-value">on</span>
<span class="token key attr-name">GOCACHE</span><span class="token punctuation">=</span><span class="token value attr-value">go/cahce</span>
<span class="token key attr-name">GOMODCACHE</span><span class="token punctuation">=</span><span class="token value attr-value">go/mod/libs</span>
<span class="token key attr-name">GOBIN</span><span class="token punctuation">=</span><span class="token value attr-value">go/mod/bin</span>
<span class="token key attr-name">GOTMPDIR</span><span class="token punctuation">=</span><span class="token value attr-value">go/temp</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这只是笔者比较喜欢的一个目录风格，前往<a href="/cmd#env">命令-环境变量</a>了解更多关于环境变量的信息，你可以完全按照个人喜好来进行自定义。</p><h2 id="编辑器" tabindex="-1"><a class="header-anchor" href="#编辑器" aria-hidden="true">#</a> 编辑器</h2><p>主流的go语言IDE目前个人只推荐下面两个</p><ol><li>goland：jetbrain出品，功能强大，全方位支持，不过需要付费，可以考虑IDEA社区版配合插件</li><li>vscode：万能的编辑器，有插件加持什么语言都能写</li></ol>`,30),x={href:"https://go.dev/play/",target:"_blank",rel:"noopener noreferrer"},O=i(`<h2 id="快速开始" tabindex="-1"><a class="header-anchor" href="#快速开始" aria-hidden="true">#</a> 快速开始</h2><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, 世界&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Hello, 世界
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当一切准备好后，就可以开始学习Go的基础语法了。</p><h2 id="寄语" tabindex="-1"><a class="header-anchor" href="#寄语" aria-hidden="true">#</a> 寄语</h2><p>在学习的过程中遇到琢磨不透的困难可以先跳过，学习任何一门语言都是先笼统的了解这个语言的大致语法与结构，再去深究一些特性和细节，文档中的理念也是如此，适合入门学习。笔者本人也仅仅只是一名普通学生，难免会有疏漏和勘误，如果有发现任何错误可以在Github提交PR，如果觉得文档还不错可以在Github上点一个Star。</p>`,7);function _(T,w){const s=o("ExternalLinkIcon"),l=o("RouterLink");return d(),c("div",null,[u,e("p",null,[n("谷歌开源地址："),e("a",v,[n("Go Google Open Source"),a(s)])]),e("p",null,[n("Github地址："),e("a",g,[n("golang/go: The Go programming language (github.com)"),a(s)])]),e("p",null,[n("语言官网："),e("a",h,[n("The Go Programming Language"),a(s)])]),m,b,e("p",null,[n("Go语言下载："),e("a",k,[n("Downloads - The Go Programming Language"),a(s)])]),f,e("p",null,[n("Stable Version指的是目前处于维护状态的两个稳定版本，Archived Version指的是不再维护的历史版本，关于历史信息可以前往"),a(l,{to:"/release.html"},{default:r(()=>[n("更新日志")]),_:1}),n("了解更多关于维护规则以及历史版本的信息。")]),G,e("p",null,[n("如果有其它的编辑器更符合自身的使用习惯也都可以用，用什么编辑器倒无所谓。如果只是写一些简短的练习代码，可以试试官方提供的"),e("a",x,[n("goplay"),a(s)]),n("，可以在线运行go代码。")]),O])}const P=t(p,[["render",_],["__file","guide.html.vue"]]);export{P as default};
