import{_ as d,V as c,W as r,X as n,Y as e,Z as a,$ as o,a0 as t,F as l}from"./framework-f06be456.js";const p={},u=t('<h1 id="入门指南" tabindex="-1"><a class="header-anchor" href="#入门指南" aria-hidden="true">#</a> 入门指南</h1><p>Go语言诞生于2007年9月30日，由三位大佬共同创造，他们分别是<code>Ken Thompson</code>(贝尔实验室成员，Unix系统系统先驱，B语言创始人，C语言创始人)，<code>Rob Pike </code>（贝尔实验室成员，Unix系统先驱，UTF-8发明者之一，Go语言设计领头人），<code>Robert Griesemer</code>(JS V8引擎研发者，三人之中最年轻)，对了还有一位是领头人的妻子<code>Renee French</code>，她主导设计了Go语言的Logo，就是一只憨憨的土拨鼠，经过了三年的初步设计与研发，Go语言由谷歌公司于2009年11月10日正式以<code>BSD-3-Clause</code>协议开源，并推出了最初的版本，每半年发布一个二级版本，被称为21世纪的C语言。</p><figure><img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202403301810401.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="hint-container tip"><p class="hint-container-title">提示</p><p>图中便是三位大佬设计Go语言的情景，里面不少典故和彩蛋。</p></div><h2 id="特性" tabindex="-1"><a class="header-anchor" href="#特性" aria-hidden="true">#</a> 特性</h2><ul><li><strong>语法简单</strong> Go语言在自由度和灵活度上做了取舍，以此换来了更好的维护性和平滑的学习曲线。</li><li><strong>部署友好</strong> Go静态编译后的二进制文件不依赖额外的运行环境，编译速度也非常快。</li><li><strong>交叉编译</strong> Go仅需要在编译时简单设置两个参数，就可以编译出能在其它平台上运行的程序</li><li><strong>天然并发</strong> Go语言对于并发的支持是纯天然的，仅需一个关键字，就可以开启一个异步协程。</li><li><strong>垃圾回收</strong> Go有着优秀的GC性能，大部分情况下GC延时都不会超过1毫秒。</li><li><strong>丰富的标准库</strong> 从字符串处理到源码AST解析，功能强大且丰富的标准库是Go语言坚实的基础。</li></ul><p>Go语言抛弃了继承，弱化了OOP，类，元编程，泛型，Lamda表达式等这些特性，拥有不错的性能和较低的上手难度，它非常适合用于云服务开发，应用服务端开发，甚至可以进行部分Linux嵌入式开发，不过由于带有垃圾回收，其性能始终无法媲美C/C++这类系统级语言，但Go在其擅长的领域表现十分出色。虽然面世只有13年，但也已经有大量的行业采用了Go作为首选语言，尽管如此，Go语言仍有不少的缺点，比如令人诟病的错误处理，略显畸形的泛型，标准库虽然很丰富但内置的数据结构却没几个等等，不过总的来说这是一门非常年轻且具有活力的现代语言，值得学习。</p><p>此外，Go还是一门完全开源的语言，由开源社区和官方共同维护Go语言的发展，官方地址是在谷歌仓库里，Github上有一份同样的镜像仓库。</p>',8),g={href:"https://cs.opensource.google/go",target:"_blank",rel:"noopener noreferrer"},v={href:"https://github.com/golang/go",target:"_blank",rel:"noopener noreferrer"},h={href:"https://go.dev/",target:"_blank",rel:"noopener noreferrer"},m=n("br",null,null,-1),b=n("h2",{id:"安装",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#安装","aria-hidden":"true"},"#"),e(" 安装")],-1),_={href:"https://go.dev/dl/",target:"_blank",rel:"noopener noreferrer"},G=n("figure",null,[n("img",{src:"https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202311052223852.png",alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),k=t(`<h3 id="windows" tabindex="-1"><a class="header-anchor" href="#windows" aria-hidden="true">#</a> windows</h3><p>对于windows平台而言，有installer和archive两种类型可选，前者就是安装包，只需要点点点，推荐使用后者，会让你更熟悉go语言的目录结构，未来出问题不至于手足无措。选择下载zip文件，压缩文件中包含go语言的源代码以及工具链和一些文档，将其解压指定的路径，然后需要配置两个系统环境变量。</p><ul><li>GOROOT - go语言的安装路径</li><li>GOPATH - go语言依赖存放路径</li></ul><p>设置好后，给系统环境变量<code>PATH</code>添加两条新的项</p><ul><li><code>%GOROOT%\\bin</code>：这是go二进制程序地址</li><li><code>%GOPATH%\\bin</code>：这是未来会下载第三方依赖的二进制文件存放地址</li></ul><p>在<code>powershell</code>中执行<code>go version</code>命令，最后能正常显示版本就说明安装正确。</p><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code><span class="token function">PS</span> C:\\user\\username&gt; go version
go version go1<span class="token punctuation">.</span>21<span class="token punctuation">.</span>3 windows/amd64
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>更新的话只需要下载新的zip覆盖原安装目录即可。</p><h3 id="linux" tabindex="-1"><a class="header-anchor" href="#linux" aria-hidden="true">#</a> linux</h3><p>拿ubuntu举例，复制想要的版本的链接，下载到本地</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">wget</span> https://golang.google.cn/dl/go1.21.1.linux-amd64.tar.gz
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>解压到指定目录</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">tar</span> <span class="token parameter variable">-C</span> ~/go <span class="token parameter variable">-xzf</span> go1.21.1.linux-amd64.tar.gz
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在<code>$HOME/.bashrc</code>文件中设置环境变量</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">export</span> <span class="token assign-left variable">GOROOT</span><span class="token operator">=</span><span class="token environment constant">$HOME</span>/go
<span class="token builtin class-name">export</span> <span class="token assign-left variable">GOPATH</span><span class="token operator">=</span><span class="token environment constant">$HOME</span>/gopath
<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span><span class="token builtin class-name">:</span><span class="token variable">$GOROOT</span>/bin:<span class="token variable">$GOPATH</span>/bin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>完成后查看安装版本，确认正确安装</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ go version
go version go1.21.1 linux/amd64
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>更新的话只需要下载新的tar.gz覆盖原安装目录即可。</p><br><h3 id="自定义" tabindex="-1"><a class="header-anchor" href="#自定义" aria-hidden="true">#</a> 自定义</h3><p>只是基本使用而言，上面的安装方式对于基本使用已经够用了，个人推荐用以下的目录结构来存放go语言及其衍生文件</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>go/
|
|--root/
|	|
|	|--go1.21.3/
|	|
|	|--go1.20.10/
|
|--mod/
|	|
|	|--bin/
|	|
|	|--libs/
|	|
|	|--pkg/
|	
|--cache/
|
|--temp/
|
|--env
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>释义如下</p><ul><li><code>go/root</code>目录用于存放各个版本go语言源文件</li><li><code>go/mod</code>对应<code>GOAPTH</code></li><li><code>go/mod/libs</code>对应<code>GOMODCACHE</code>，也就是下载的第三方依赖存放地址</li><li><code>go/mod/bin</code>对应<code>GOBIN</code>，第三方依赖二进制文件存放地址</li><li><code>go/cache</code>，对应<code>GOCACHE</code>，存放缓存文件</li><li><code>go/temp</code>，对应<code>GOTMPDIR</code>，存放临时文件</li><li><code>go/env</code>，对应<code>GOENV</code>，全局环境变量配置文件</li></ul><p>该方式更新时不需要覆盖原安装目录，只需要将其存放到<code>go/root</code>目录下，然后修改<code>GOROOT</code>系统环境变量为该目录下指定版本的文件夹即可。在默认情况下env文件是读取的路径<code>GOROOT/env</code>，通过设置<code>GOENV</code>系统变量将其与<code>GOROOT</code>分离开，避免了因版本变更时go环境变量配置的变化，下面是<code>env</code>文件的初始设置。</p><div class="language-ini line-numbers-mode" data-ext="ini"><pre class="language-ini"><code><span class="token key attr-name">GO111MODULE</span><span class="token punctuation">=</span><span class="token value attr-value">on</span>
<span class="token key attr-name">GOCACHE</span><span class="token punctuation">=</span><span class="token value attr-value">go/cache</span>
<span class="token key attr-name">GOMODCACHE</span><span class="token punctuation">=</span><span class="token value attr-value">go/mod/libs</span>
<span class="token key attr-name">GOBIN</span><span class="token punctuation">=</span><span class="token value attr-value">go/mod/bin</span>
<span class="token key attr-name">GOTMPDIR</span><span class="token punctuation">=</span><span class="token value attr-value">go/temp</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这只是笔者比较喜欢的一个目录风格，前往<a href="/cmd#env">命令-环境变量</a>了解更多关于环境变量的信息，你可以完全按照个人喜好来进行自定义。</p><h2 id="编辑器" tabindex="-1"><a class="header-anchor" href="#编辑器" aria-hidden="true">#</a> 编辑器</h2><p>主流的go语言IDE目前个人只推荐下面两个</p><ol><li>goland：jetbrain出品，功能强大，全方位支持，不过需要付费，可以考虑IDEA社区版配合插件</li><li>vscode：无需付费，万能的编辑器，有插件加持什么语言都能写</li></ol>`,30),f={href:"https://go.dev/play/",target:"_blank",rel:"noopener noreferrer"},O=n("h2",{id:"章节介绍",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#章节介绍","aria-hidden":"true"},"#"),e(" 章节介绍")],-1),x=n("p",null,"下面对本站的内容进行一个简单的介绍，部分页面是空白的代表着还未更新。",-1),T=n("code",null,"if",-1),C=n("code",null,"for",-1),w=n("h2",{id:"寄语",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#寄语","aria-hidden":"true"},"#"),e(" 寄语")],-1),P=n("p",null,"虽然Go语言整体难度并不高，但在学习的过程中遇到琢磨不透的困难可以先跳过，学习任何一门语言都是先笼统的了解这个语言的大致语法与结构，再去深究一些特性和细节，文档中的理念也是如此，适合入门学习。笔者本人也仅仅只是一名普通学生，难免会有疏漏和勘误，如果有发现任何错误可以在Github提交PR，如果觉得文档还不错可以在Github上点一个Star。",-1);function A(E,H){const i=l("ExternalLinkIcon"),s=l("RouterLink");return c(),r("div",null,[u,n("p",null,[e("谷歌开源地址："),n("a",g,[e("google/go"),a(i)])]),n("p",null,[e("Github地址："),n("a",v,[e("golang/go: The Go programming language (github.com)"),a(i)])]),n("p",null,[e("语言官网："),n("a",h,[e("The Go Programming Language"),a(i)])]),m,b,n("p",null,[e("Go语言下载："),n("a",_,[e("Downloads - The Go Programming Language"),a(i)])]),G,n("p",null,[e("Stable Version指的是目前处于维护状态的两个稳定版本，Archived Version指的是不再维护的历史版本，关于历史信息可以前往"),a(s,{to:"/release.html"},{default:o(()=>[e("更新日志")]),_:1}),e("了解更多关于维护规则以及历史版本的信息。")]),k,n("p",null,[e("如果有其它的编辑器更符合自身的使用习惯也都可以用，用什么编辑器倒无所谓，如果只是写一些简短的练习代码，可以试试官方提供的"),n("a",f,[e("goplay"),a(i)]),e("，可以在线运行go代码。")]),O,x,n("ul",null,[n("li",null,[e("语言入门：主要讲解关于Go语言本身的内容，偏理论。 "),n("ul",null,[n("li",null,[a(s,{to:"/essential/base/"},{default:o(()=>[e("语法基础")]),_:1}),e("：主要讲一些十分基础的语法，像是"),T,e("，"),C,e("之类的语法规则。")]),n("li",null,[a(s,{to:"/essential/senior/"},{default:o(()=>[e("语法进阶")]),_:1}),e("：讲一些Go独有的东西，关于模块，测试，协程等相关内容。")]),n("li",null,[a(s,{to:"/essential/std/"},{default:o(()=>[e("标准库")]),_:1}),e("：对Go自带的标准库的一个简单介绍，因为标准库的内容实在太过庞大所以随缘更新。")]),n("li",null,[a(s,{to:"/essential/impl/"},{default:o(()=>[e("实现原理")]),_:1}),e("：主要讲Go语言的一些内部设计原理，比如协程调度，内存管理，垃圾回收等。")])])]),n("li",null,[e("社区生态：主要讲解Go周边的生态，偏应用。 "),n("ul",null,[n("li",null,[a(s,{to:"/community/database/"},{default:o(()=>[e("数据库")]),_:1}),e("：通过Go操作主流的数据库。")]),n("li",null,[a(s,{to:"/community/micro/"},{default:o(()=>[e("微服务")]),_:1}),e("：介绍一些与Go有关的微服务工具。")]),n("li",null,[a(s,{to:"/community/pkgs/"},{default:o(()=>[e("第三方库")]),_:1}),e("：介绍一些由Go编写的第三方库，随缘更新，也可以直接在"),a(s,{to:"/deb.html"},{default:o(()=>[e("依赖导航")]),_:1}),e("里面查看。")])])])]),w,P])}const y=d(p,[["render",A],["__file","guide.html.vue"]]);export{y as default};
