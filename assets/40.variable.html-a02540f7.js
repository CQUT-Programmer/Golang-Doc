import{_ as e,V as p,W as t,X as s,Y as n,Z as o,a0 as i,F as c}from"./framework-f06be456.js";const l={},u=s("h1",{id:"变量",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#变量","aria-hidden":"true"},"#"),n(" 变量")],-1),d={href:"https://go.dev/ref/spec#Variables",target:"_blank",rel:"noopener noreferrer"},r=i(`<br><h2 id="声明" tabindex="-1"><a class="header-anchor" href="#声明" aria-hidden="true">#</a> 声明</h2><p>变量的声明会用到<code>var</code>关键字，格式为<code>var 变量名 类型名</code>，变量名的命名规则遵守标识符的命名规则，一些例子如下</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> intNum <span class="token builtin">int</span>
<span class="token keyword">var</span> str <span class="token builtin">string</span>
<span class="token keyword">var</span> char <span class="token builtin">byte</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当要声明多个相同类型的变量时，可以只写一次类型</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> numA<span class="token punctuation">,</span> numB<span class="token punctuation">,</span> numC <span class="token builtin">int</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当要声明多个不同类型的变量时，可以使用<code>()</code>进行包裹，可以存在多个<code>()</code>。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> <span class="token punctuation">(</span>
	name    <span class="token builtin">string</span>
	age     <span class="token builtin">int</span>
	address <span class="token builtin">string</span>
<span class="token punctuation">)</span>

<span class="token keyword">var</span> <span class="token punctuation">(</span>
	school <span class="token builtin">string</span>
	class <span class="token builtin">int</span>
<span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一个变量如果只是声明而不赋值，那么变量存储的值就是对应类型的零值。</p><br><h2 id="赋值" tabindex="-1"><a class="header-anchor" href="#赋值" aria-hidden="true">#</a> 赋值</h2><p>赋值会用到运算符<code>=</code>，例如</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> name <span class="token builtin">string</span>
name <span class="token operator">=</span> <span class="token string">&quot;jack&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以声明的时候直接赋值</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> name <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;jack&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或者这样也可以</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> name <span class="token builtin">string</span>
<span class="token keyword">var</span> age <span class="token builtin">int</span>
name<span class="token punctuation">,</span> age <span class="token operator">=</span> <span class="token string">&quot;jack&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第二种方式每次都要指定类型，可以使用官方提供的语法糖：短变量初始化，可以省略掉<code>var</code>关键字和后置类型，具体是什么类型交给编译器自行推断。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>name <span class="token operator">:=</span> <span class="token string">&quot;jack&quot;</span> <span class="token comment">// 字符串类型的变量。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>不过需要注意的是，短变量初始化不能使用<code>nil</code>，因为<code>nil</code>不属于任何类型，编译器无法推断其类型。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>name <span class="token operator">:=</span> <span class="token boolean">nil</span> <span class="token comment">// 无法通过编译</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>短变量声明也可以批量初始化</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>name<span class="token punctuation">,</span> age <span class="token operator">:=</span> <span class="token string">&quot;jack&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><p>在Go中，如果想要交换两个变量的值，不需要使用指针，可以使用<code>=</code>直接进行交换，语法上看起来非常直观，例子如下</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>num1<span class="token punctuation">,</span> num2 <span class="token operator">:=</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">36</span>
nam1<span class="token punctuation">,</span> num2 <span class="token operator">=</span> num2<span class="token punctuation">,</span> num1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>三个变量也是同样如此</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>num1<span class="token punctuation">,</span> num2<span class="token punctuation">,</span> num3 <span class="token operator">:=</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">49</span>
nam1<span class="token punctuation">,</span> num2<span class="token punctuation">,</span> num3  <span class="token operator">=</span> num3<span class="token punctuation">,</span> num2<span class="token punctuation">,</span> num1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><br><p>由于在函数内部存在未使用的变量会无法通过编译，但有些变量又确实用不到，这个时候就可以使用匿名变量<code>_</code>，使用<code>_</code>来表示该变量可以忽略，例如</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="比较" tabindex="-1"><a class="header-anchor" href="#比较" aria-hidden="true">#</a> 比较</h2><p>go1.21新增了<code>min</code>，<code>max</code> ，以及<code>cmp</code>包用于比较变量的值，均支持泛型。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> max<span class="token punctuation">[</span>T cmp<span class="token punctuation">.</span>Ordered<span class="token punctuation">]</span><span class="token punctuation">(</span>x T<span class="token punctuation">,</span> y <span class="token operator">...</span>T<span class="token punctuation">)</span> T

<span class="token keyword">func</span> min<span class="token punctuation">[</span>T cmp<span class="token punctuation">.</span>Ordered<span class="token punctuation">]</span><span class="token punctuation">(</span>x T<span class="token punctuation">,</span> y <span class="token operator">...</span>T<span class="token punctuation">)</span> T
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>比较最小值</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>minVal <span class="token operator">:=</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1.2</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>比较最大值</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>maxVal <span class="token operator">:=</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1.12</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>比较两个值，相等返回0，大于返回1，小于返回-1</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> Compare<span class="token punctuation">[</span>T Ordered<span class="token punctuation">]</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y T<span class="token punctuation">)</span> <span class="token builtin">int</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">switch</span> cmp<span class="token punctuation">.</span><span class="token function">Compare</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">case</span> <span class="token number">0</span><span class="token punctuation">:</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;equal&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;larger&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">case</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;less&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>判断是否小于</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> Less<span class="token punctuation">[</span>T Ordered<span class="token punctuation">]</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y T<span class="token punctuation">)</span> <span class="token builtin">bool</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>cmp<span class="token punctuation">.</span><span class="token function">Less</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h2 id="注意" tabindex="-1"><a class="header-anchor" href="#注意" aria-hidden="true">#</a> 注意</h2><p>当变量的作用域为函数内部时，如果创建了一个新的变量但没有任何地方调用该变量，那么这样的代码将会无法通过编译，例如在演示赋值时的代码例子</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> name <span class="token builtin">string</span>
	<span class="token keyword">var</span> age <span class="token builtin">int</span>
	name<span class="token punctuation">,</span> age <span class="token operator">=</span> <span class="token string">&quot;jack&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编译器输出错误信息</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>main.go:4:6: name declared but not used
main.go:5:6: age declared but not used
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>当导入了包却不调用也是同样无法通过编译</p><br><p>但是当变量的作用域为整个包时，不在一个函数内部，那么就允许该变量未被使用，只需要将上述代码的声明位置移动一下</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">var</span> name <span class="token builtin">string</span>
<span class="token keyword">var</span> age <span class="token builtin">int</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   name<span class="token punctuation">,</span> age <span class="token operator">=</span> <span class="token string">&quot;jack&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改后的代码就可以通过编译。</p><br><p>短变量声明的时候有一个注意点，当使用短变量给一个已经存在的变量重复声明时会无法通过编译</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>a <span class="token operator">:=</span> <span class="token number">1</span>
a <span class="token operator">:=</span> <span class="token number">2</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编译会报错</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>no new variables on left side of :=
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>意思就是<code>:=</code>符号左边没有新变量，那么稍微修改下。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>a <span class="token operator">:=</span> <span class="token number">1</span>
a<span class="token punctuation">,</span> b <span class="token operator">:=</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出为</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>2 3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>所以结论就是，当使用短变量声明时，不能重复声明已存在的元素，除非同时声明新的变量，否则无法通过编译。</p>`,65);function k(v,m){const a=c("ExternalLinkIcon");return p(),t("div",null,[u,s("p",null,[n("变量是用于保存一个值的存储位置，允许其存储的值在运行时动态的变化。除了指针类型，每声明一个变量，都会为其分配一块内存以存储对应类型的值，前往"),s("a",d,[n("参考手册-变量"),o(a)]),n("以查看更多细节。")]),r])}const b=e(l,[["render",k],["__file","40.variable.html.vue"]]);export{b as default};
